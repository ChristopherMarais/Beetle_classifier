diff --git a/Train/.ipynb_checkpoints/PyLi_wanb_sweep_CoatNet-checkpoint.ipynb b/Train/.ipynb_checkpoints/PyLi_wanb_sweep_CoatNet-checkpoint.ipynb
index ced9a67..084614c 100644
--- a/Train/.ipynb_checkpoints/PyLi_wanb_sweep_CoatNet-checkpoint.ipynb
+++ b/Train/.ipynb_checkpoints/PyLi_wanb_sweep_CoatNet-checkpoint.ipynb
@@ -6,11 +6,11 @@
    "id": "c7b471f1-f5fa-4eb1-b9ae-2d67ed8838df",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:16.271323Z",
-     "iopub.status.busy": "2023-03-01T20:56:16.271323Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.861826Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.860831Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:16.271323Z"
+     "iopub.execute_input": "2023-03-03T02:34:51.785381Z",
+     "iopub.status.busy": "2023-03-03T02:34:51.784880Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.441881Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.440880Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:51.785381Z"
     },
     "tags": []
    },
@@ -65,11 +65,11 @@
    "id": "289e69f9-9a23-4f33-94af-a8950f9e1818",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.862838Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.862838Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.876388Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.876388Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.862838Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.443381Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.442880Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.457381Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.456380Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.443381Z"
     },
     "tags": []
    },
@@ -101,11 +101,11 @@
    "id": "5fc60314-d2bb-4767-9cef-219da9f1955d",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.879932Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.879932Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.893218Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.891688Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.879932Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.461381Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.460880Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.504382Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.502880Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.461381Z"
     },
     "tags": []
    },
@@ -138,11 +138,11 @@
    "id": "01c28e3c-850d-48b6-8db9-3a8804e0c9ae",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.895234Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.894231Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.908832Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.907873Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.895234Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.505880Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.505381Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.565880Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.564880Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.505381Z"
     },
     "tags": []
    },
@@ -205,11 +205,11 @@
    "id": "8b9e722b-cda4-4956-a0c1-8eb31023f765",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.909835Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.909835Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.924555Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.923617Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.909835Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.567883Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.567383Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.597383Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.595880Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.567883Z"
     },
     "tags": []
    },
@@ -276,11 +276,11 @@
    "id": "9dbe4b19-9805-40b4-a513-ea35715a0c64",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.926555Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.926555Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.940645Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.939643Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.926555Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.599379Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.598881Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.643380Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.642382Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.599379Z"
     },
     "tags": []
    },
@@ -312,11 +312,11 @@
    "id": "7539d3a5-ca4f-4ba3-a462-05875d4b9a90",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.942648Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.942648Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.957018Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.955693Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.942648Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.645381Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.644881Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.704881Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.704381Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.645381Z"
     },
     "tags": []
    },
@@ -356,11 +356,11 @@
    "id": "40361447-e7c3-47f2-9e04-a9058b596861",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.959403Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.959403Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.988223Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.987711Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.959403Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.706381Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.706381Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.752898Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.750900Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.706381Z"
     },
     "tags": []
    },
@@ -451,11 +451,11 @@
    "id": "deb34aed-792a-4022-a878-f8d6c4ffa97c",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.989234Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.989234Z",
-     "iopub.status.idle": "2023-03-01T20:56:21.019858Z",
-     "shell.execute_reply": "2023-03-01T20:56:21.018856Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.989234Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.754898Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.754400Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.797897Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.797406Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.754898Z"
     },
     "tags": []
    },
@@ -523,6 +523,11 @@
     "        return loss\n",
     "\n",
     "    def validation_step(self,batch,batch_idx):\n",
+    "        preds, loss, acc = self._get_preds_loss_accuracy(batch)\n",
+    "        # Log loss and metric\n",
+    "        self.log('val_loss_alt', loss)\n",
+    "        self.log('val_accuracy_alt', acc)\n",
+    "        \n",
     "        x,y = batch\n",
     "        y_pred = self(x)\n",
     "        loss = F.cross_entropy(y_pred,y)\n",
@@ -535,7 +540,7 @@
     "        wandb.log({\"val_conf_mat\" : wandb.plot.confusion_matrix(probs=self.cpu_pred,\n",
     "                        y_true=self.cpu_y, preds=None,\n",
     "                        class_names=self.class_names)})\n",
-    "        return loss\n",
+    "        return preds\n",
     "\n",
     "    def test_step(self,batch,batch_idx):\n",
     "        x,y = batch\n",
@@ -567,11 +572,11 @@
    "id": "e2170c95-2962-43ec-a457-31dfec8a23d2",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:21.023110Z",
-     "iopub.status.busy": "2023-03-01T20:56:21.022116Z",
-     "iopub.status.idle": "2023-03-01T20:56:21.035162Z",
-     "shell.execute_reply": "2023-03-01T20:56:21.034159Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:21.023110Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.799398Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.798897Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.860396Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.859396Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.799398Z"
     },
     "tags": []
    },
@@ -588,11 +593,11 @@
    "id": "188ce4ef-e6b7-4320-8e5d-ceeb616bf7d1",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:21.037696Z",
-     "iopub.status.busy": "2023-03-01T20:56:21.036175Z",
-     "iopub.status.idle": "2023-03-01T20:56:21.050772Z",
-     "shell.execute_reply": "2023-03-01T20:56:21.049776Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:21.037696Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.861896Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.861396Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.906397Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.905896Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.861896Z"
     },
     "tags": []
    },
@@ -629,15 +634,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": null,
    "id": "762279ca-26d9-4310-992f-b6f8912da7fe",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:21.054045Z",
-     "iopub.status.busy": "2023-03-01T20:56:21.054045Z",
-     "iopub.status.idle": "2023-03-01T20:56:29.581762Z",
-     "shell.execute_reply": "2023-03-01T20:56:29.580856Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:21.054045Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.910396Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.909897Z"
     },
     "tags": []
    },
@@ -664,7 +666,7 @@
     {
      "data": {
       "text/html": [
-       "Run data is saved locally in <code>.\\wandb\\run-20230301_155623-r20dbs67</code>"
+       "Run data is saved locally in <code>.\\wandb\\run-20230302_213500-nr7kx3xl</code>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -676,7 +678,7 @@
     {
      "data": {
       "text/html": [
-       "Syncing run <strong><a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/r20dbs67' target=\"_blank\">tough-meadow-4</a></strong> to <a href='https://wandb.ai/christopher-marais/computer_vision_test_single' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+       "Syncing run <strong><a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/nr7kx3xl' target=\"_blank\">lilac-meadow-8</a></strong> to <a href='https://wandb.ai/christopher-marais/computer_vision_test_single' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -700,7 +702,7 @@
     {
      "data": {
       "text/html": [
-       " View run at <a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/r20dbs67' target=\"_blank\">https://wandb.ai/christopher-marais/computer_vision_test_single/runs/r20dbs67</a>"
+       " View run at <a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/nr7kx3xl' target=\"_blank\">https://wandb.ai/christopher-marais/computer_vision_test_single/runs/nr7kx3xl</a>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -741,7 +743,7 @@
     {
      "data": {
       "application/vnd.jupyter.widget-view+json": {
-       "model_id": "a55cd26ad321421b80f30fb5a2bc2460",
+       "model_id": "",
        "version_major": 2,
        "version_minor": 0
       },
@@ -756,9 +758,9 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "C:\\Users\\gcmar\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:488: PossibleUserWarning: Your `val_dataloader`'s sampler has shuffling enabled, it is strongly recommended that you turn shuffling off for val/test/predict dataloaders.\n",
+      "C:\\Users\\GCM\\anaconda3\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:488: PossibleUserWarning: Your `val_dataloader`'s sampler has shuffling enabled, it is strongly recommended that you turn shuffling off for val/test/predict dataloaders.\n",
       "  rank_zero_warn(\n",
-      "C:\\Users\\gcmar\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:224: PossibleUserWarning: The dataloader, val_dataloader 0, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 16 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.\n",
+      "C:\\Users\\GCM\\anaconda3\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:224: PossibleUserWarning: The dataloader, val_dataloader 0, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 16 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.\n",
       "  rank_zero_warn(\n"
      ]
     },
@@ -770,185 +772,2417 @@
      ]
     },
     {
-     "ename": "IndexError",
-     "evalue": "Dimension specified as 0 but tensor has no dimensions",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
-      "Cell \u001b[1;32mIn[12], line 21\u001b[0m\n\u001b[0;32m     10\u001b[0m model \u001b[38;5;241m=\u001b[39m YogaModel(n_classes\u001b[38;5;241m=\u001b[39mnum_of_classes)\n\u001b[0;32m     13\u001b[0m trainer \u001b[38;5;241m=\u001b[39m Trainer(\n\u001b[0;32m     14\u001b[0m     accelerator\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgpu\u001b[39m\u001b[38;5;124m'\u001b[39m, \n\u001b[0;32m     15\u001b[0m     devices\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, \u001b[38;5;66;03m# use all GPU's (-1)\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     18\u001b[0m     max_epochs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m3\u001b[39m            \u001b[38;5;66;03m# number of epochs\u001b[39;00m\n\u001b[0;32m     19\u001b[0m     )\n\u001b[1;32m---> 21\u001b[0m \u001b[43mtrainer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     23\u001b[0m trainer\u001b[38;5;241m.\u001b[39mtest(model, datamodule\u001b[38;5;241m=\u001b[39mdata)\n\u001b[0;32m     25\u001b[0m wandb\u001b[38;5;241m.\u001b[39mfinish()\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:608\u001b[0m, in \u001b[0;36mTrainer.fit\u001b[1;34m(self, model, train_dataloaders, val_dataloaders, datamodule, ckpt_path)\u001b[0m\n\u001b[0;32m    606\u001b[0m model \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_maybe_unwrap_optimized(model)\n\u001b[0;32m    607\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstrategy\u001b[38;5;241m.\u001b[39m_lightning_module \u001b[38;5;241m=\u001b[39m model\n\u001b[1;32m--> 608\u001b[0m \u001b[43mcall\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_and_handle_interrupt\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    609\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_fit_impl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrain_dataloaders\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mval_dataloaders\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdatamodule\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mckpt_path\u001b[49m\n\u001b[0;32m    610\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\call.py:38\u001b[0m, in \u001b[0;36m_call_and_handle_interrupt\u001b[1;34m(trainer, trainer_fn, *args, **kwargs)\u001b[0m\n\u001b[0;32m     36\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m trainer\u001b[38;5;241m.\u001b[39mstrategy\u001b[38;5;241m.\u001b[39mlauncher\u001b[38;5;241m.\u001b[39mlaunch(trainer_fn, \u001b[38;5;241m*\u001b[39margs, trainer\u001b[38;5;241m=\u001b[39mtrainer, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m     37\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m---> 38\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m trainer_fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m     40\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m _TunerExitException:\n\u001b[0;32m     41\u001b[0m     trainer\u001b[38;5;241m.\u001b[39m_call_teardown_hook()\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:650\u001b[0m, in \u001b[0;36mTrainer._fit_impl\u001b[1;34m(self, model, train_dataloaders, val_dataloaders, datamodule, ckpt_path)\u001b[0m\n\u001b[0;32m    643\u001b[0m ckpt_path \u001b[38;5;241m=\u001b[39m ckpt_path \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mresume_from_checkpoint\n\u001b[0;32m    644\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_ckpt_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_checkpoint_connector\u001b[38;5;241m.\u001b[39m_set_ckpt_path(\n\u001b[0;32m    645\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstate\u001b[38;5;241m.\u001b[39mfn,\n\u001b[0;32m    646\u001b[0m     ckpt_path,  \u001b[38;5;66;03m# type: ignore[arg-type]\u001b[39;00m\n\u001b[0;32m    647\u001b[0m     model_provided\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[0;32m    648\u001b[0m     model_connected\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlightning_module \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m    649\u001b[0m )\n\u001b[1;32m--> 650\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mckpt_path\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mckpt_path\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    652\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstate\u001b[38;5;241m.\u001b[39mstopped\n\u001b[0;32m    653\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtraining \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:1112\u001b[0m, in \u001b[0;36mTrainer._run\u001b[1;34m(self, model, ckpt_path)\u001b[0m\n\u001b[0;32m   1108\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_checkpoint_connector\u001b[38;5;241m.\u001b[39mrestore_training_state()\n\u001b[0;32m   1110\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_checkpoint_connector\u001b[38;5;241m.\u001b[39mresume_end()\n\u001b[1;32m-> 1112\u001b[0m results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_stage\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1114\u001b[0m log\u001b[38;5;241m.\u001b[39mdetail(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m: trainer tearing down\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   1115\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_teardown()\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:1191\u001b[0m, in \u001b[0;36mTrainer._run_stage\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1189\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpredicting:\n\u001b[0;32m   1190\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run_predict()\n\u001b[1;32m-> 1191\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_train\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:1204\u001b[0m, in \u001b[0;36mTrainer._run_train\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1201\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_pre_training_routine()\n\u001b[0;32m   1203\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m isolate_rng():\n\u001b[1;32m-> 1204\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_sanity_check\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1206\u001b[0m \u001b[38;5;66;03m# enable train mode\u001b[39;00m\n\u001b[0;32m   1207\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:1276\u001b[0m, in \u001b[0;36mTrainer._run_sanity_check\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1274\u001b[0m \u001b[38;5;66;03m# run eval step\u001b[39;00m\n\u001b[0;32m   1275\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mno_grad():\n\u001b[1;32m-> 1276\u001b[0m     \u001b[43mval_loop\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1278\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_callback_hooks(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mon_sanity_check_end\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   1280\u001b[0m \u001b[38;5;66;03m# reset logger connector\u001b[39;00m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\loops\\loop.py:199\u001b[0m, in \u001b[0;36mLoop.run\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    197\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    198\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mon_advance_start(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m--> 199\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39madvance(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    200\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mon_advance_end()\n\u001b[0;32m    201\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_restarting \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\loops\\dataloader\\evaluation_loop.py:152\u001b[0m, in \u001b[0;36mEvaluationLoop.advance\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    150\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnum_dataloaders \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m    151\u001b[0m     kwargs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdataloader_idx\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m dataloader_idx\n\u001b[1;32m--> 152\u001b[0m dl_outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mepoch_loop\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_data_fetcher\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdl_max_batches\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    154\u001b[0m \u001b[38;5;66;03m# store batch level output per dataloader\u001b[39;00m\n\u001b[0;32m    155\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_outputs\u001b[38;5;241m.\u001b[39mappend(dl_outputs)\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\loops\\loop.py:199\u001b[0m, in \u001b[0;36mLoop.run\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    197\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    198\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mon_advance_start(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m--> 199\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39madvance(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    200\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mon_advance_end()\n\u001b[0;32m    201\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_restarting \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\loops\\epoch\\evaluation_epoch_loop.py:143\u001b[0m, in \u001b[0;36mEvaluationEpochLoop.advance\u001b[1;34m(self, data_fetcher, dl_max_batches, kwargs)\u001b[0m\n\u001b[0;32m    140\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbatch_progress\u001b[38;5;241m.\u001b[39mincrement_processed()\n\u001b[0;32m    142\u001b[0m \u001b[38;5;66;03m# track loss history\u001b[39;00m\n\u001b[1;32m--> 143\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_on_evaluation_batch_end(output, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    145\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbatch_progress\u001b[38;5;241m.\u001b[39mincrement_completed()\n\u001b[0;32m    147\u001b[0m \u001b[38;5;66;03m# log batch metrics\u001b[39;00m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\loops\\epoch\\evaluation_epoch_loop.py:275\u001b[0m, in \u001b[0;36mEvaluationEpochLoop._on_evaluation_batch_end\u001b[1;34m(self, output, **kwargs)\u001b[0m\n\u001b[0;32m    273\u001b[0m kwargs\u001b[38;5;241m.\u001b[39msetdefault(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdataloader_idx\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;241m0\u001b[39m)  \u001b[38;5;66;03m# TODO: the argument should be keyword for these\u001b[39;00m\n\u001b[0;32m    274\u001b[0m hook_name \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mon_test_batch_end\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtrainer\u001b[38;5;241m.\u001b[39mtesting \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mon_validation_batch_end\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m--> 275\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtrainer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_callback_hooks\u001b[49m\u001b[43m(\u001b[49m\u001b[43mhook_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43moutput\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mvalues\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    276\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtrainer\u001b[38;5;241m.\u001b[39m_call_lightning_module_hook(hook_name, output, \u001b[38;5;241m*\u001b[39mkwargs\u001b[38;5;241m.\u001b[39mvalues())\n\u001b[0;32m    278\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtrainer\u001b[38;5;241m.\u001b[39m_logger_connector\u001b[38;5;241m.\u001b[39mon_batch_end()\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:1394\u001b[0m, in \u001b[0;36mTrainer._call_callback_hooks\u001b[1;34m(self, hook_name, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1392\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m callable(fn):\n\u001b[0;32m   1393\u001b[0m         \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprofiler\u001b[38;5;241m.\u001b[39mprofile(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m[Callback]\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mcallback\u001b[38;5;241m.\u001b[39mstate_key\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mhook_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m):\n\u001b[1;32m-> 1394\u001b[0m             fn(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlightning_module, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m   1396\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m pl_module:\n\u001b[0;32m   1397\u001b[0m     \u001b[38;5;66;03m# restore current_fx when nested context\u001b[39;00m\n\u001b[0;32m   1398\u001b[0m     pl_module\u001b[38;5;241m.\u001b[39m_current_fx_name \u001b[38;5;241m=\u001b[39m prev_fx_name\n",
-      "Cell \u001b[1;32mIn[11], line 17\u001b[0m, in \u001b[0;36mLogPredictionsCallback.on_validation_batch_end\u001b[1;34m(self, trainer, pl_module, outputs, batch, batch_idx, dataloader_idx)\u001b[0m\n\u001b[0;32m     15\u001b[0m x, y \u001b[38;5;241m=\u001b[39m batch\n\u001b[0;32m     16\u001b[0m images \u001b[38;5;241m=\u001b[39m [img \u001b[38;5;28;01mfor\u001b[39;00m img \u001b[38;5;129;01min\u001b[39;00m x[:n]]\n\u001b[1;32m---> 17\u001b[0m captions \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mGround Truth: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00my_i\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m - Prediction: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00my_pred\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mfor\u001b[39;00m y_i, y_pred \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(y[:n], \u001b[43moutputs\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43mn\u001b[49m\u001b[43m]\u001b[49m)]\n\u001b[0;32m     19\u001b[0m \u001b[38;5;66;03m# Option 1: log images with `WandbLogger.log_image`\u001b[39;00m\n\u001b[0;32m     20\u001b[0m wandb_logger\u001b[38;5;241m.\u001b[39mlog_image(key\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msample_images\u001b[39m\u001b[38;5;124m'\u001b[39m, images\u001b[38;5;241m=\u001b[39mimages, caption\u001b[38;5;241m=\u001b[39mcaptions)\n",
-      "\u001b[1;31mIndexError\u001b[0m: Dimension specified as 0 but tensor has no dimensions"
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "C:\\Users\\GCM\\anaconda3\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:224: PossibleUserWarning: The dataloader, train_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 16 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.\n",
+      "  rank_zero_warn(\n",
+      "C:\\Users\\GCM\\anaconda3\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:1600: PossibleUserWarning: The number of training batches (1) is smaller than the logging interval Trainer(log_every_n_steps=50). Set a lower value for log_every_n_steps if you want to see logs for the training epoch.\n",
+      "  rank_zero_warn(\n"
      ]
-    }
-   ],
-   "source": [
-    "wandb.login()\n",
-    "wandb_logger = WandbLogger(project='computer_vision_test_single', log_model='all')\n",
-    "\n",
-    "# TRAIN\n",
-    "# setup data\n",
-    "# data = MNISTDataModule()\n",
-    "data = YogaDataModule()\n",
-    "\n",
-    "# setup model - choose different hyperparameters per experiment\n",
-    "model = YogaModel(n_classes=num_of_classes)\n",
-    "\n",
-    "\n",
-    "trainer = Trainer(\n",
-    "    accelerator='gpu', \n",
-    "    devices=-1, # use all GPU's (-1)\n",
-    "    callbacks=[log_predictions_callback,checkpoint_callback],\n",
-    "    logger=wandb_logger,    # W&B integration\n",
-    "    max_epochs=3            # number of epochs\n",
-    "    )\n",
-    "\n",
-    "trainer.fit(model, data)\n",
-    "\n",
-    "trainer.test(model, datamodule=data)\n",
-    "\n",
-    "wandb.finish()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "3b58022d-6961-41b0-a4e1-60bbc1c09791",
-   "metadata": {
-    "execution": {
-     "iopub.status.busy": "2023-03-01T20:56:29.583762Z",
-     "iopub.status.idle": "2023-03-01T20:56:29.584765Z",
-     "shell.execute_reply": "2023-03-01T20:56:29.583762Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:29.583762Z"
     },
-    "tags": []
-   },
-   "outputs": [],
-   "source": [
-    "d'd"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "8956e1be-a0ff-4f71-af46-2af5a8bca845",
-   "metadata": {},
-   "source": [
-    "# Parameter tuning sweep"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "ebde1018-ddfa-43f2-b9c6-f2c1d4b19736",
-   "metadata": {
-    "execution": {
-     "iopub.status.busy": "2023-03-01T20:56:29.585969Z",
-     "iopub.status.idle": "2023-03-01T20:56:29.586972Z",
-     "shell.execute_reply": "2023-03-01T20:56:29.586972Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:29.586972Z"
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "dabdddad4f224d0391dfc5d9de0bf891",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Training: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
     },
-    "tags": []
-   },
-   "outputs": [],
-   "source": [
-    "sweep_config = {\n",
-    "    \"project\": \"computer_vision_test_sweep\",\n",
-    "    \"method\": \"bayes\",   # Random search\n",
-    "    \"metric\": {           # We want to maximize val_acc\n",
-    "        \"name\": \"val_acc\",\n",
-    "        \"goal\": \"maximize\"\n",
-    "    },\n",
-    "    \"run_cap\": 10, #terminates the sweep after a number of runs\n",
-    "    \"early_terminate\": { # only terminates a run early not the sweep (reduces computation time)\n",
-    "        \"type\": \"hyperband\",\n",
-    "        \"min_iter\": 3\n",
-    "    },\n",
-    "    \"parameters\": {\n",
-    "        # \"n_layer_1\": {\n",
-    "        #     # Choose from pre-defined values\n",
-    "        #     \"values\": [32, 64, 128, 256, 512]\n",
-    "        # },\n",
-    "        # \"n_layer_2\": {\n",
-    "        #     # Choose from pre-defined values\n",
-    "        #     \"values\": [32, 64, 128, 256, 512, 1024]\n",
-    "        # },\n",
-    "        \"lr\": {\n",
-    "            # log uniform distribution between exp(min) and exp(max)\n",
-    "            \"distribution\": \"log_uniform\",\n",
-    "            \"min\": -9.21,   # exp(-9.21) = 1e-4\n",
-    "            \"max\": -4.61    # exp(-4.61) = 1e-2\n",
-    "        }\n",
-    "    }\n",
-    "}"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "91aeb8a0-9ffd-4439-808c-2951d1f74b36",
-   "metadata": {
-    "execution": {
-     "iopub.status.busy": "2023-03-01T20:56:29.589019Z",
-     "iopub.status.idle": "2023-03-01T20:56:29.589019Z",
-     "shell.execute_reply": "2023-03-01T20:56:29.589019Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:29.589019Z"
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n"
+     ]
     },
-    "tags": []
-   },
-   "outputs": [],
-   "source": [
-    "def sweep_iteration():\n",
-    "    # set up W&B logger\n",
-    "    wandb.init()    # required to have access to `wandb.config`\n",
-    "    wandb_logger = WandbLogger(log_model='all')\n",
-    "\n",
-    "    # setup data\n",
-    "    # data = MNISTDataModule()\n",
-    "    data = YogaDataModule()\n",
-    "\n",
-    "    # setup model - note how we refer to sweep parameters with wandb.config\n",
-    "    # model = LitMNIST(\n",
-    "    #     n_layer_1=wandb.config.n_layer_1,\n",
-    "    #     n_layer_2=wandb.config.n_layer_2,\n",
-    "    #     lr=wandb.config.lr\n",
-    "    # )\n",
-    "    model = YogaModel(lr=wandb.config.lr, n_classes=num_of_classes)\n",
-    "\n",
-    "    # setup Trainer\n",
-    "    trainer = Trainer(\n",
-    "        logger=wandb_logger,    # W&B integration\n",
-    "        gpus=-1,                # use all GPU's\n",
-    "        max_epochs=100            # number of epochs\n",
-    "        )\n",
-    "\n",
-    "    # train\n",
-    "    trainer.fit(model, data)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "869b0393-21cf-4fba-8efd-7678a852b697",
-   "metadata": {
-    "execution": {
-     "iopub.status.busy": "2023-03-01T20:56:29.591016Z",
-     "iopub.status.idle": "2023-03-01T20:56:29.592018Z",
-     "shell.execute_reply": "2023-03-01T20:56:29.592018Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:29.592018Z"
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
     },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "11e67f3c4dc54810b96c11d136c6c315",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "685c7d61eeaa45dbb5511cd633068972",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "fc5601e3bc994f2db0cae140502f158f",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "03cdcf799f7b4b0494d7da557b166798",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "0f040cf5f1f74d00897165fc98c10b63",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "21a60f4c8e8349599d348137c7061e72",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "76e255ea669a47ffb4d5d851771968d3",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "f80ad022f4ae46b49b106e6c7ab85224",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "d1a336c722fe40d985409dc865398d9e",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "e91e266c341a4373acf9192f1d47b238",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "cdda6d0be2824829984eb6bfec764fd3",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "bd051232e1e546e0a2060212719386e4",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "ebf67a40651c496982aa803e05cfa2a5",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "e7b946efc24b45aead2a649988e6aafc",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "66b803e9273b49069fa251e8f32d7ca7",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "27ee38ead355460d936e032bde763df1",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "0989eb750cfd4035995911fc3cfec9eb",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "a974f7ae0d904e6ca0f32dbb2b6b4639",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "9198060ec8074ecc90cc955dc79a30a9",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "3257935f29e14c62af038be2a52ab43c",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "`Trainer.fit` stopped: `max_epochs=100` reached.\n",
+      "LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]\n",
+      "C:\\Users\\GCM\\anaconda3\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:488: PossibleUserWarning: Your `test_dataloader`'s sampler has shuffling enabled, it is strongly recommended that you turn shuffling off for val/test/predict dataloaders.\n",
+      "  rank_zero_warn(\n",
+      "C:\\Users\\GCM\\anaconda3\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:224: PossibleUserWarning: The dataloader, test_dataloader 0, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 16 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.\n",
+      "  rank_zero_warn(\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "1e10e0bd075442aba47309c9e67e2d95",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Testing: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n",
+      "       Test metric             DataLoader 0\n",
+      "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n",
+      "        test_acc            0.8999999761581421\n",
+      "        test_loss           0.7883114218711853\n",
+      "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "wandb.login()\n",
+    "wandb_logger = WandbLogger(project='computer_vision_test_single', log_model='all')\n",
+    "\n",
+    "# TRAIN\n",
+    "# setup data\n",
+    "# data = MNISTDataModule()\n",
+    "data = YogaDataModule()\n",
+    "\n",
+    "# setup model - choose different hyperparameters per experiment\n",
+    "model = YogaModel(n_classes=num_of_classes)\n",
+    "\n",
+    "\n",
+    "trainer = Trainer(\n",
+    "    accelerator='gpu', \n",
+    "    devices=-1, # use all GPU's (-1)\n",
+    "    callbacks=[log_predictions_callback,checkpoint_callback],\n",
+    "    logger=wandb_logger,    # W&B integration\n",
+    "    max_epochs=100            # number of epochs\n",
+    "    )\n",
+    "\n",
+    "trainer.fit(model, data)\n",
+    "\n",
+    "trainer.test(model, datamodule=data)\n",
+    "\n",
+    "wandb.finish()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "3b58022d-6961-41b0-a4e1-60bbc1c09791",
+   "metadata": {
+    "tags": []
+   },
+   "outputs": [],
+   "source": [
+    "d'd"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "8956e1be-a0ff-4f71-af46-2af5a8bca845",
+   "metadata": {},
+   "source": [
+    "# Parameter tuning sweep"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "ebde1018-ddfa-43f2-b9c6-f2c1d4b19736",
+   "metadata": {
+    "tags": []
+   },
+   "outputs": [],
+   "source": [
+    "sweep_config = {\n",
+    "    \"project\": \"computer_vision_test_sweep\",\n",
+    "    \"method\": \"bayes\",   # Random search\n",
+    "    \"metric\": {           # We want to maximize val_acc\n",
+    "        \"name\": \"val_acc\",\n",
+    "        \"goal\": \"maximize\"\n",
+    "    },\n",
+    "    \"run_cap\": 10, #terminates the sweep after a number of runs\n",
+    "    \"early_terminate\": { # only terminates a run early not the sweep (reduces computation time)\n",
+    "        \"type\": \"hyperband\",\n",
+    "        \"min_iter\": 3\n",
+    "    },\n",
+    "    \"parameters\": {\n",
+    "        # \"n_layer_1\": {\n",
+    "        #     # Choose from pre-defined values\n",
+    "        #     \"values\": [32, 64, 128, 256, 512]\n",
+    "        # },\n",
+    "        # \"n_layer_2\": {\n",
+    "        #     # Choose from pre-defined values\n",
+    "        #     \"values\": [32, 64, 128, 256, 512, 1024]\n",
+    "        # },\n",
+    "        \"lr\": {\n",
+    "            # log uniform distribution between exp(min) and exp(max)\n",
+    "            \"distribution\": \"log_uniform\",\n",
+    "            \"min\": -9.21,   # exp(-9.21) = 1e-4\n",
+    "            \"max\": -4.61    # exp(-4.61) = 1e-2\n",
+    "        }\n",
+    "    }\n",
+    "}"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "91aeb8a0-9ffd-4439-808c-2951d1f74b36",
+   "metadata": {
+    "tags": []
+   },
+   "outputs": [],
+   "source": [
+    "def sweep_iteration():\n",
+    "    # set up W&B logger\n",
+    "    wandb.init()    # required to have access to `wandb.config`\n",
+    "    wandb_logger = WandbLogger(log_model='all')\n",
+    "\n",
+    "    # setup data\n",
+    "    # data = MNISTDataModule()\n",
+    "    data = YogaDataModule()\n",
+    "\n",
+    "    # setup model - note how we refer to sweep parameters with wandb.config\n",
+    "    # model = LitMNIST(\n",
+    "    #     n_layer_1=wandb.config.n_layer_1,\n",
+    "    #     n_layer_2=wandb.config.n_layer_2,\n",
+    "    #     lr=wandb.config.lr\n",
+    "    # )\n",
+    "    model = YogaModel(lr=wandb.config.lr, n_classes=num_of_classes)\n",
+    "\n",
+    "    # setup Trainer\n",
+    "    trainer = Trainer(\n",
+    "        logger=wandb_logger,    # W&B integration\n",
+    "        gpus=-1,                # use all GPU's\n",
+    "        max_epochs=100            # number of epochs\n",
+    "        )\n",
+    "\n",
+    "    # train\n",
+    "    trainer.fit(model, data)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "869b0393-21cf-4fba-8efd-7678a852b697",
+   "metadata": {
     "tags": []
    },
    "outputs": [],
diff --git a/Train/PyLi_wanb_sweep_CoatNet.ipynb b/Train/PyLi_wanb_sweep_CoatNet.ipynb
index ced9a67..084614c 100644
--- a/Train/PyLi_wanb_sweep_CoatNet.ipynb
+++ b/Train/PyLi_wanb_sweep_CoatNet.ipynb
@@ -6,11 +6,11 @@
    "id": "c7b471f1-f5fa-4eb1-b9ae-2d67ed8838df",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:16.271323Z",
-     "iopub.status.busy": "2023-03-01T20:56:16.271323Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.861826Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.860831Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:16.271323Z"
+     "iopub.execute_input": "2023-03-03T02:34:51.785381Z",
+     "iopub.status.busy": "2023-03-03T02:34:51.784880Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.441881Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.440880Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:51.785381Z"
     },
     "tags": []
    },
@@ -65,11 +65,11 @@
    "id": "289e69f9-9a23-4f33-94af-a8950f9e1818",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.862838Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.862838Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.876388Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.876388Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.862838Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.443381Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.442880Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.457381Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.456380Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.443381Z"
     },
     "tags": []
    },
@@ -101,11 +101,11 @@
    "id": "5fc60314-d2bb-4767-9cef-219da9f1955d",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.879932Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.879932Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.893218Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.891688Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.879932Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.461381Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.460880Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.504382Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.502880Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.461381Z"
     },
     "tags": []
    },
@@ -138,11 +138,11 @@
    "id": "01c28e3c-850d-48b6-8db9-3a8804e0c9ae",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.895234Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.894231Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.908832Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.907873Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.895234Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.505880Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.505381Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.565880Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.564880Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.505381Z"
     },
     "tags": []
    },
@@ -205,11 +205,11 @@
    "id": "8b9e722b-cda4-4956-a0c1-8eb31023f765",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.909835Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.909835Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.924555Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.923617Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.909835Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.567883Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.567383Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.597383Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.595880Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.567883Z"
     },
     "tags": []
    },
@@ -276,11 +276,11 @@
    "id": "9dbe4b19-9805-40b4-a513-ea35715a0c64",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.926555Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.926555Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.940645Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.939643Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.926555Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.599379Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.598881Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.643380Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.642382Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.599379Z"
     },
     "tags": []
    },
@@ -312,11 +312,11 @@
    "id": "7539d3a5-ca4f-4ba3-a462-05875d4b9a90",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.942648Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.942648Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.957018Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.955693Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.942648Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.645381Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.644881Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.704881Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.704381Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.645381Z"
     },
     "tags": []
    },
@@ -356,11 +356,11 @@
    "id": "40361447-e7c3-47f2-9e04-a9058b596861",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.959403Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.959403Z",
-     "iopub.status.idle": "2023-03-01T20:56:20.988223Z",
-     "shell.execute_reply": "2023-03-01T20:56:20.987711Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.959403Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.706381Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.706381Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.752898Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.750900Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.706381Z"
     },
     "tags": []
    },
@@ -451,11 +451,11 @@
    "id": "deb34aed-792a-4022-a878-f8d6c4ffa97c",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:20.989234Z",
-     "iopub.status.busy": "2023-03-01T20:56:20.989234Z",
-     "iopub.status.idle": "2023-03-01T20:56:21.019858Z",
-     "shell.execute_reply": "2023-03-01T20:56:21.018856Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:20.989234Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.754898Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.754400Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.797897Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.797406Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.754898Z"
     },
     "tags": []
    },
@@ -523,6 +523,11 @@
     "        return loss\n",
     "\n",
     "    def validation_step(self,batch,batch_idx):\n",
+    "        preds, loss, acc = self._get_preds_loss_accuracy(batch)\n",
+    "        # Log loss and metric\n",
+    "        self.log('val_loss_alt', loss)\n",
+    "        self.log('val_accuracy_alt', acc)\n",
+    "        \n",
     "        x,y = batch\n",
     "        y_pred = self(x)\n",
     "        loss = F.cross_entropy(y_pred,y)\n",
@@ -535,7 +540,7 @@
     "        wandb.log({\"val_conf_mat\" : wandb.plot.confusion_matrix(probs=self.cpu_pred,\n",
     "                        y_true=self.cpu_y, preds=None,\n",
     "                        class_names=self.class_names)})\n",
-    "        return loss\n",
+    "        return preds\n",
     "\n",
     "    def test_step(self,batch,batch_idx):\n",
     "        x,y = batch\n",
@@ -567,11 +572,11 @@
    "id": "e2170c95-2962-43ec-a457-31dfec8a23d2",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:21.023110Z",
-     "iopub.status.busy": "2023-03-01T20:56:21.022116Z",
-     "iopub.status.idle": "2023-03-01T20:56:21.035162Z",
-     "shell.execute_reply": "2023-03-01T20:56:21.034159Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:21.023110Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.799398Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.798897Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.860396Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.859396Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.799398Z"
     },
     "tags": []
    },
@@ -588,11 +593,11 @@
    "id": "188ce4ef-e6b7-4320-8e5d-ceeb616bf7d1",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:21.037696Z",
-     "iopub.status.busy": "2023-03-01T20:56:21.036175Z",
-     "iopub.status.idle": "2023-03-01T20:56:21.050772Z",
-     "shell.execute_reply": "2023-03-01T20:56:21.049776Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:21.037696Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.861896Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.861396Z",
+     "iopub.status.idle": "2023-03-03T02:34:56.906397Z",
+     "shell.execute_reply": "2023-03-03T02:34:56.905896Z",
+     "shell.execute_reply.started": "2023-03-03T02:34:56.861896Z"
     },
     "tags": []
    },
@@ -629,15 +634,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": null,
    "id": "762279ca-26d9-4310-992f-b6f8912da7fe",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-01T20:56:21.054045Z",
-     "iopub.status.busy": "2023-03-01T20:56:21.054045Z",
-     "iopub.status.idle": "2023-03-01T20:56:29.581762Z",
-     "shell.execute_reply": "2023-03-01T20:56:29.580856Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:21.054045Z"
+     "iopub.execute_input": "2023-03-03T02:34:56.910396Z",
+     "iopub.status.busy": "2023-03-03T02:34:56.909897Z"
     },
     "tags": []
    },
@@ -664,7 +666,7 @@
     {
      "data": {
       "text/html": [
-       "Run data is saved locally in <code>.\\wandb\\run-20230301_155623-r20dbs67</code>"
+       "Run data is saved locally in <code>.\\wandb\\run-20230302_213500-nr7kx3xl</code>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -676,7 +678,7 @@
     {
      "data": {
       "text/html": [
-       "Syncing run <strong><a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/r20dbs67' target=\"_blank\">tough-meadow-4</a></strong> to <a href='https://wandb.ai/christopher-marais/computer_vision_test_single' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+       "Syncing run <strong><a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/nr7kx3xl' target=\"_blank\">lilac-meadow-8</a></strong> to <a href='https://wandb.ai/christopher-marais/computer_vision_test_single' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -700,7 +702,7 @@
     {
      "data": {
       "text/html": [
-       " View run at <a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/r20dbs67' target=\"_blank\">https://wandb.ai/christopher-marais/computer_vision_test_single/runs/r20dbs67</a>"
+       " View run at <a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/nr7kx3xl' target=\"_blank\">https://wandb.ai/christopher-marais/computer_vision_test_single/runs/nr7kx3xl</a>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -741,7 +743,7 @@
     {
      "data": {
       "application/vnd.jupyter.widget-view+json": {
-       "model_id": "a55cd26ad321421b80f30fb5a2bc2460",
+       "model_id": "",
        "version_major": 2,
        "version_minor": 0
       },
@@ -756,9 +758,9 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "C:\\Users\\gcmar\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:488: PossibleUserWarning: Your `val_dataloader`'s sampler has shuffling enabled, it is strongly recommended that you turn shuffling off for val/test/predict dataloaders.\n",
+      "C:\\Users\\GCM\\anaconda3\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:488: PossibleUserWarning: Your `val_dataloader`'s sampler has shuffling enabled, it is strongly recommended that you turn shuffling off for val/test/predict dataloaders.\n",
       "  rank_zero_warn(\n",
-      "C:\\Users\\gcmar\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:224: PossibleUserWarning: The dataloader, val_dataloader 0, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 16 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.\n",
+      "C:\\Users\\GCM\\anaconda3\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:224: PossibleUserWarning: The dataloader, val_dataloader 0, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 16 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.\n",
       "  rank_zero_warn(\n"
      ]
     },
@@ -770,185 +772,2417 @@
      ]
     },
     {
-     "ename": "IndexError",
-     "evalue": "Dimension specified as 0 but tensor has no dimensions",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
-      "Cell \u001b[1;32mIn[12], line 21\u001b[0m\n\u001b[0;32m     10\u001b[0m model \u001b[38;5;241m=\u001b[39m YogaModel(n_classes\u001b[38;5;241m=\u001b[39mnum_of_classes)\n\u001b[0;32m     13\u001b[0m trainer \u001b[38;5;241m=\u001b[39m Trainer(\n\u001b[0;32m     14\u001b[0m     accelerator\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgpu\u001b[39m\u001b[38;5;124m'\u001b[39m, \n\u001b[0;32m     15\u001b[0m     devices\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, \u001b[38;5;66;03m# use all GPU's (-1)\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     18\u001b[0m     max_epochs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m3\u001b[39m            \u001b[38;5;66;03m# number of epochs\u001b[39;00m\n\u001b[0;32m     19\u001b[0m     )\n\u001b[1;32m---> 21\u001b[0m \u001b[43mtrainer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     23\u001b[0m trainer\u001b[38;5;241m.\u001b[39mtest(model, datamodule\u001b[38;5;241m=\u001b[39mdata)\n\u001b[0;32m     25\u001b[0m wandb\u001b[38;5;241m.\u001b[39mfinish()\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:608\u001b[0m, in \u001b[0;36mTrainer.fit\u001b[1;34m(self, model, train_dataloaders, val_dataloaders, datamodule, ckpt_path)\u001b[0m\n\u001b[0;32m    606\u001b[0m model \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_maybe_unwrap_optimized(model)\n\u001b[0;32m    607\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstrategy\u001b[38;5;241m.\u001b[39m_lightning_module \u001b[38;5;241m=\u001b[39m model\n\u001b[1;32m--> 608\u001b[0m \u001b[43mcall\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_and_handle_interrupt\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    609\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_fit_impl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrain_dataloaders\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mval_dataloaders\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdatamodule\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mckpt_path\u001b[49m\n\u001b[0;32m    610\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\call.py:38\u001b[0m, in \u001b[0;36m_call_and_handle_interrupt\u001b[1;34m(trainer, trainer_fn, *args, **kwargs)\u001b[0m\n\u001b[0;32m     36\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m trainer\u001b[38;5;241m.\u001b[39mstrategy\u001b[38;5;241m.\u001b[39mlauncher\u001b[38;5;241m.\u001b[39mlaunch(trainer_fn, \u001b[38;5;241m*\u001b[39margs, trainer\u001b[38;5;241m=\u001b[39mtrainer, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m     37\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m---> 38\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m trainer_fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m     40\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m _TunerExitException:\n\u001b[0;32m     41\u001b[0m     trainer\u001b[38;5;241m.\u001b[39m_call_teardown_hook()\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:650\u001b[0m, in \u001b[0;36mTrainer._fit_impl\u001b[1;34m(self, model, train_dataloaders, val_dataloaders, datamodule, ckpt_path)\u001b[0m\n\u001b[0;32m    643\u001b[0m ckpt_path \u001b[38;5;241m=\u001b[39m ckpt_path \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mresume_from_checkpoint\n\u001b[0;32m    644\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_ckpt_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_checkpoint_connector\u001b[38;5;241m.\u001b[39m_set_ckpt_path(\n\u001b[0;32m    645\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstate\u001b[38;5;241m.\u001b[39mfn,\n\u001b[0;32m    646\u001b[0m     ckpt_path,  \u001b[38;5;66;03m# type: ignore[arg-type]\u001b[39;00m\n\u001b[0;32m    647\u001b[0m     model_provided\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[0;32m    648\u001b[0m     model_connected\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlightning_module \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m    649\u001b[0m )\n\u001b[1;32m--> 650\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mckpt_path\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mckpt_path\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    652\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstate\u001b[38;5;241m.\u001b[39mstopped\n\u001b[0;32m    653\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtraining \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:1112\u001b[0m, in \u001b[0;36mTrainer._run\u001b[1;34m(self, model, ckpt_path)\u001b[0m\n\u001b[0;32m   1108\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_checkpoint_connector\u001b[38;5;241m.\u001b[39mrestore_training_state()\n\u001b[0;32m   1110\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_checkpoint_connector\u001b[38;5;241m.\u001b[39mresume_end()\n\u001b[1;32m-> 1112\u001b[0m results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_stage\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1114\u001b[0m log\u001b[38;5;241m.\u001b[39mdetail(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m: trainer tearing down\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   1115\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_teardown()\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:1191\u001b[0m, in \u001b[0;36mTrainer._run_stage\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1189\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpredicting:\n\u001b[0;32m   1190\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run_predict()\n\u001b[1;32m-> 1191\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_train\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:1204\u001b[0m, in \u001b[0;36mTrainer._run_train\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1201\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_pre_training_routine()\n\u001b[0;32m   1203\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m isolate_rng():\n\u001b[1;32m-> 1204\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_sanity_check\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1206\u001b[0m \u001b[38;5;66;03m# enable train mode\u001b[39;00m\n\u001b[0;32m   1207\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:1276\u001b[0m, in \u001b[0;36mTrainer._run_sanity_check\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1274\u001b[0m \u001b[38;5;66;03m# run eval step\u001b[39;00m\n\u001b[0;32m   1275\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mno_grad():\n\u001b[1;32m-> 1276\u001b[0m     \u001b[43mval_loop\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1278\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_callback_hooks(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mon_sanity_check_end\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   1280\u001b[0m \u001b[38;5;66;03m# reset logger connector\u001b[39;00m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\loops\\loop.py:199\u001b[0m, in \u001b[0;36mLoop.run\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    197\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    198\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mon_advance_start(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m--> 199\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39madvance(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    200\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mon_advance_end()\n\u001b[0;32m    201\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_restarting \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\loops\\dataloader\\evaluation_loop.py:152\u001b[0m, in \u001b[0;36mEvaluationLoop.advance\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    150\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnum_dataloaders \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m    151\u001b[0m     kwargs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdataloader_idx\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m dataloader_idx\n\u001b[1;32m--> 152\u001b[0m dl_outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mepoch_loop\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_data_fetcher\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdl_max_batches\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    154\u001b[0m \u001b[38;5;66;03m# store batch level output per dataloader\u001b[39;00m\n\u001b[0;32m    155\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_outputs\u001b[38;5;241m.\u001b[39mappend(dl_outputs)\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\loops\\loop.py:199\u001b[0m, in \u001b[0;36mLoop.run\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    197\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    198\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mon_advance_start(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m--> 199\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39madvance(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    200\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mon_advance_end()\n\u001b[0;32m    201\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_restarting \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\loops\\epoch\\evaluation_epoch_loop.py:143\u001b[0m, in \u001b[0;36mEvaluationEpochLoop.advance\u001b[1;34m(self, data_fetcher, dl_max_batches, kwargs)\u001b[0m\n\u001b[0;32m    140\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbatch_progress\u001b[38;5;241m.\u001b[39mincrement_processed()\n\u001b[0;32m    142\u001b[0m \u001b[38;5;66;03m# track loss history\u001b[39;00m\n\u001b[1;32m--> 143\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_on_evaluation_batch_end(output, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    145\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbatch_progress\u001b[38;5;241m.\u001b[39mincrement_completed()\n\u001b[0;32m    147\u001b[0m \u001b[38;5;66;03m# log batch metrics\u001b[39;00m\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\loops\\epoch\\evaluation_epoch_loop.py:275\u001b[0m, in \u001b[0;36mEvaluationEpochLoop._on_evaluation_batch_end\u001b[1;34m(self, output, **kwargs)\u001b[0m\n\u001b[0;32m    273\u001b[0m kwargs\u001b[38;5;241m.\u001b[39msetdefault(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdataloader_idx\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;241m0\u001b[39m)  \u001b[38;5;66;03m# TODO: the argument should be keyword for these\u001b[39;00m\n\u001b[0;32m    274\u001b[0m hook_name \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mon_test_batch_end\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtrainer\u001b[38;5;241m.\u001b[39mtesting \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mon_validation_batch_end\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m--> 275\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtrainer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_callback_hooks\u001b[49m\u001b[43m(\u001b[49m\u001b[43mhook_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43moutput\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mvalues\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    276\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtrainer\u001b[38;5;241m.\u001b[39m_call_lightning_module_hook(hook_name, output, \u001b[38;5;241m*\u001b[39mkwargs\u001b[38;5;241m.\u001b[39mvalues())\n\u001b[0;32m    278\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtrainer\u001b[38;5;241m.\u001b[39m_logger_connector\u001b[38;5;241m.\u001b[39mon_batch_end()\n",
-      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:1394\u001b[0m, in \u001b[0;36mTrainer._call_callback_hooks\u001b[1;34m(self, hook_name, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1392\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m callable(fn):\n\u001b[0;32m   1393\u001b[0m         \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprofiler\u001b[38;5;241m.\u001b[39mprofile(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m[Callback]\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mcallback\u001b[38;5;241m.\u001b[39mstate_key\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mhook_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m):\n\u001b[1;32m-> 1394\u001b[0m             fn(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlightning_module, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m   1396\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m pl_module:\n\u001b[0;32m   1397\u001b[0m     \u001b[38;5;66;03m# restore current_fx when nested context\u001b[39;00m\n\u001b[0;32m   1398\u001b[0m     pl_module\u001b[38;5;241m.\u001b[39m_current_fx_name \u001b[38;5;241m=\u001b[39m prev_fx_name\n",
-      "Cell \u001b[1;32mIn[11], line 17\u001b[0m, in \u001b[0;36mLogPredictionsCallback.on_validation_batch_end\u001b[1;34m(self, trainer, pl_module, outputs, batch, batch_idx, dataloader_idx)\u001b[0m\n\u001b[0;32m     15\u001b[0m x, y \u001b[38;5;241m=\u001b[39m batch\n\u001b[0;32m     16\u001b[0m images \u001b[38;5;241m=\u001b[39m [img \u001b[38;5;28;01mfor\u001b[39;00m img \u001b[38;5;129;01min\u001b[39;00m x[:n]]\n\u001b[1;32m---> 17\u001b[0m captions \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mGround Truth: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00my_i\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m - Prediction: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00my_pred\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mfor\u001b[39;00m y_i, y_pred \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(y[:n], \u001b[43moutputs\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43mn\u001b[49m\u001b[43m]\u001b[49m)]\n\u001b[0;32m     19\u001b[0m \u001b[38;5;66;03m# Option 1: log images with `WandbLogger.log_image`\u001b[39;00m\n\u001b[0;32m     20\u001b[0m wandb_logger\u001b[38;5;241m.\u001b[39mlog_image(key\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msample_images\u001b[39m\u001b[38;5;124m'\u001b[39m, images\u001b[38;5;241m=\u001b[39mimages, caption\u001b[38;5;241m=\u001b[39mcaptions)\n",
-      "\u001b[1;31mIndexError\u001b[0m: Dimension specified as 0 but tensor has no dimensions"
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "C:\\Users\\GCM\\anaconda3\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:224: PossibleUserWarning: The dataloader, train_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 16 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.\n",
+      "  rank_zero_warn(\n",
+      "C:\\Users\\GCM\\anaconda3\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\trainer.py:1600: PossibleUserWarning: The number of training batches (1) is smaller than the logging interval Trainer(log_every_n_steps=50). Set a lower value for log_every_n_steps if you want to see logs for the training epoch.\n",
+      "  rank_zero_warn(\n"
      ]
-    }
-   ],
-   "source": [
-    "wandb.login()\n",
-    "wandb_logger = WandbLogger(project='computer_vision_test_single', log_model='all')\n",
-    "\n",
-    "# TRAIN\n",
-    "# setup data\n",
-    "# data = MNISTDataModule()\n",
-    "data = YogaDataModule()\n",
-    "\n",
-    "# setup model - choose different hyperparameters per experiment\n",
-    "model = YogaModel(n_classes=num_of_classes)\n",
-    "\n",
-    "\n",
-    "trainer = Trainer(\n",
-    "    accelerator='gpu', \n",
-    "    devices=-1, # use all GPU's (-1)\n",
-    "    callbacks=[log_predictions_callback,checkpoint_callback],\n",
-    "    logger=wandb_logger,    # W&B integration\n",
-    "    max_epochs=3            # number of epochs\n",
-    "    )\n",
-    "\n",
-    "trainer.fit(model, data)\n",
-    "\n",
-    "trainer.test(model, datamodule=data)\n",
-    "\n",
-    "wandb.finish()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "3b58022d-6961-41b0-a4e1-60bbc1c09791",
-   "metadata": {
-    "execution": {
-     "iopub.status.busy": "2023-03-01T20:56:29.583762Z",
-     "iopub.status.idle": "2023-03-01T20:56:29.584765Z",
-     "shell.execute_reply": "2023-03-01T20:56:29.583762Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:29.583762Z"
     },
-    "tags": []
-   },
-   "outputs": [],
-   "source": [
-    "d'd"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "8956e1be-a0ff-4f71-af46-2af5a8bca845",
-   "metadata": {},
-   "source": [
-    "# Parameter tuning sweep"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "ebde1018-ddfa-43f2-b9c6-f2c1d4b19736",
-   "metadata": {
-    "execution": {
-     "iopub.status.busy": "2023-03-01T20:56:29.585969Z",
-     "iopub.status.idle": "2023-03-01T20:56:29.586972Z",
-     "shell.execute_reply": "2023-03-01T20:56:29.586972Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:29.586972Z"
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "dabdddad4f224d0391dfc5d9de0bf891",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Training: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
     },
-    "tags": []
-   },
-   "outputs": [],
-   "source": [
-    "sweep_config = {\n",
-    "    \"project\": \"computer_vision_test_sweep\",\n",
-    "    \"method\": \"bayes\",   # Random search\n",
-    "    \"metric\": {           # We want to maximize val_acc\n",
-    "        \"name\": \"val_acc\",\n",
-    "        \"goal\": \"maximize\"\n",
-    "    },\n",
-    "    \"run_cap\": 10, #terminates the sweep after a number of runs\n",
-    "    \"early_terminate\": { # only terminates a run early not the sweep (reduces computation time)\n",
-    "        \"type\": \"hyperband\",\n",
-    "        \"min_iter\": 3\n",
-    "    },\n",
-    "    \"parameters\": {\n",
-    "        # \"n_layer_1\": {\n",
-    "        #     # Choose from pre-defined values\n",
-    "        #     \"values\": [32, 64, 128, 256, 512]\n",
-    "        # },\n",
-    "        # \"n_layer_2\": {\n",
-    "        #     # Choose from pre-defined values\n",
-    "        #     \"values\": [32, 64, 128, 256, 512, 1024]\n",
-    "        # },\n",
-    "        \"lr\": {\n",
-    "            # log uniform distribution between exp(min) and exp(max)\n",
-    "            \"distribution\": \"log_uniform\",\n",
-    "            \"min\": -9.21,   # exp(-9.21) = 1e-4\n",
-    "            \"max\": -4.61    # exp(-4.61) = 1e-2\n",
-    "        }\n",
-    "    }\n",
-    "}"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "91aeb8a0-9ffd-4439-808c-2951d1f74b36",
-   "metadata": {
-    "execution": {
-     "iopub.status.busy": "2023-03-01T20:56:29.589019Z",
-     "iopub.status.idle": "2023-03-01T20:56:29.589019Z",
-     "shell.execute_reply": "2023-03-01T20:56:29.589019Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:29.589019Z"
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n"
+     ]
     },
-    "tags": []
-   },
-   "outputs": [],
-   "source": [
-    "def sweep_iteration():\n",
-    "    # set up W&B logger\n",
-    "    wandb.init()    # required to have access to `wandb.config`\n",
-    "    wandb_logger = WandbLogger(log_model='all')\n",
-    "\n",
-    "    # setup data\n",
-    "    # data = MNISTDataModule()\n",
-    "    data = YogaDataModule()\n",
-    "\n",
-    "    # setup model - note how we refer to sweep parameters with wandb.config\n",
-    "    # model = LitMNIST(\n",
-    "    #     n_layer_1=wandb.config.n_layer_1,\n",
-    "    #     n_layer_2=wandb.config.n_layer_2,\n",
-    "    #     lr=wandb.config.lr\n",
-    "    # )\n",
-    "    model = YogaModel(lr=wandb.config.lr, n_classes=num_of_classes)\n",
-    "\n",
-    "    # setup Trainer\n",
-    "    trainer = Trainer(\n",
-    "        logger=wandb_logger,    # W&B integration\n",
-    "        gpus=-1,                # use all GPU's\n",
-    "        max_epochs=100            # number of epochs\n",
-    "        )\n",
-    "\n",
-    "    # train\n",
-    "    trainer.fit(model, data)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "869b0393-21cf-4fba-8efd-7678a852b697",
-   "metadata": {
-    "execution": {
-     "iopub.status.busy": "2023-03-01T20:56:29.591016Z",
-     "iopub.status.idle": "2023-03-01T20:56:29.592018Z",
-     "shell.execute_reply": "2023-03-01T20:56:29.592018Z",
-     "shell.execute_reply.started": "2023-03-01T20:56:29.592018Z"
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
     },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "11e67f3c4dc54810b96c11d136c6c315",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "685c7d61eeaa45dbb5511cd633068972",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "fc5601e3bc994f2db0cae140502f158f",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "03cdcf799f7b4b0494d7da557b166798",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "0f040cf5f1f74d00897165fc98c10b63",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "21a60f4c8e8349599d348137c7061e72",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "76e255ea669a47ffb4d5d851771968d3",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "f80ad022f4ae46b49b106e6c7ab85224",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "d1a336c722fe40d985409dc865398d9e",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "e91e266c341a4373acf9192f1d47b238",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "cdda6d0be2824829984eb6bfec764fd3",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "bd051232e1e546e0a2060212719386e4",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "ebf67a40651c496982aa803e05cfa2a5",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "e7b946efc24b45aead2a649988e6aafc",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "66b803e9273b49069fa251e8f32d7ca7",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "27ee38ead355460d936e032bde763df1",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "0989eb750cfd4035995911fc3cfec9eb",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "a974f7ae0d904e6ca0f32dbb2b6b4639",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "9198060ec8074ecc90cc955dc79a30a9",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "3257935f29e14c62af038be2a52ab43c",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Validation: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "`Trainer.fit` stopped: `max_epochs=100` reached.\n",
+      "LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]\n",
+      "C:\\Users\\GCM\\anaconda3\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:488: PossibleUserWarning: Your `test_dataloader`'s sampler has shuffling enabled, it is strongly recommended that you turn shuffling off for val/test/predict dataloaders.\n",
+      "  rank_zero_warn(\n",
+      "C:\\Users\\GCM\\anaconda3\\envs\\BC_310\\lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\data_connector.py:224: PossibleUserWarning: The dataloader, test_dataloader 0, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 16 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.\n",
+      "  rank_zero_warn(\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "1e10e0bd075442aba47309c9e67e2d95",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "Testing: 0it [00:00, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([10, 30000])\n",
+      "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n",
+      "       Test metric             DataLoader 0\n",
+      "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n",
+      "        test_acc            0.8999999761581421\n",
+      "        test_loss           0.7883114218711853\n",
+      "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "wandb.login()\n",
+    "wandb_logger = WandbLogger(project='computer_vision_test_single', log_model='all')\n",
+    "\n",
+    "# TRAIN\n",
+    "# setup data\n",
+    "# data = MNISTDataModule()\n",
+    "data = YogaDataModule()\n",
+    "\n",
+    "# setup model - choose different hyperparameters per experiment\n",
+    "model = YogaModel(n_classes=num_of_classes)\n",
+    "\n",
+    "\n",
+    "trainer = Trainer(\n",
+    "    accelerator='gpu', \n",
+    "    devices=-1, # use all GPU's (-1)\n",
+    "    callbacks=[log_predictions_callback,checkpoint_callback],\n",
+    "    logger=wandb_logger,    # W&B integration\n",
+    "    max_epochs=100            # number of epochs\n",
+    "    )\n",
+    "\n",
+    "trainer.fit(model, data)\n",
+    "\n",
+    "trainer.test(model, datamodule=data)\n",
+    "\n",
+    "wandb.finish()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "3b58022d-6961-41b0-a4e1-60bbc1c09791",
+   "metadata": {
+    "tags": []
+   },
+   "outputs": [],
+   "source": [
+    "d'd"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "8956e1be-a0ff-4f71-af46-2af5a8bca845",
+   "metadata": {},
+   "source": [
+    "# Parameter tuning sweep"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "ebde1018-ddfa-43f2-b9c6-f2c1d4b19736",
+   "metadata": {
+    "tags": []
+   },
+   "outputs": [],
+   "source": [
+    "sweep_config = {\n",
+    "    \"project\": \"computer_vision_test_sweep\",\n",
+    "    \"method\": \"bayes\",   # Random search\n",
+    "    \"metric\": {           # We want to maximize val_acc\n",
+    "        \"name\": \"val_acc\",\n",
+    "        \"goal\": \"maximize\"\n",
+    "    },\n",
+    "    \"run_cap\": 10, #terminates the sweep after a number of runs\n",
+    "    \"early_terminate\": { # only terminates a run early not the sweep (reduces computation time)\n",
+    "        \"type\": \"hyperband\",\n",
+    "        \"min_iter\": 3\n",
+    "    },\n",
+    "    \"parameters\": {\n",
+    "        # \"n_layer_1\": {\n",
+    "        #     # Choose from pre-defined values\n",
+    "        #     \"values\": [32, 64, 128, 256, 512]\n",
+    "        # },\n",
+    "        # \"n_layer_2\": {\n",
+    "        #     # Choose from pre-defined values\n",
+    "        #     \"values\": [32, 64, 128, 256, 512, 1024]\n",
+    "        # },\n",
+    "        \"lr\": {\n",
+    "            # log uniform distribution between exp(min) and exp(max)\n",
+    "            \"distribution\": \"log_uniform\",\n",
+    "            \"min\": -9.21,   # exp(-9.21) = 1e-4\n",
+    "            \"max\": -4.61    # exp(-4.61) = 1e-2\n",
+    "        }\n",
+    "    }\n",
+    "}"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "91aeb8a0-9ffd-4439-808c-2951d1f74b36",
+   "metadata": {
+    "tags": []
+   },
+   "outputs": [],
+   "source": [
+    "def sweep_iteration():\n",
+    "    # set up W&B logger\n",
+    "    wandb.init()    # required to have access to `wandb.config`\n",
+    "    wandb_logger = WandbLogger(log_model='all')\n",
+    "\n",
+    "    # setup data\n",
+    "    # data = MNISTDataModule()\n",
+    "    data = YogaDataModule()\n",
+    "\n",
+    "    # setup model - note how we refer to sweep parameters with wandb.config\n",
+    "    # model = LitMNIST(\n",
+    "    #     n_layer_1=wandb.config.n_layer_1,\n",
+    "    #     n_layer_2=wandb.config.n_layer_2,\n",
+    "    #     lr=wandb.config.lr\n",
+    "    # )\n",
+    "    model = YogaModel(lr=wandb.config.lr, n_classes=num_of_classes)\n",
+    "\n",
+    "    # setup Trainer\n",
+    "    trainer = Trainer(\n",
+    "        logger=wandb_logger,    # W&B integration\n",
+    "        gpus=-1,                # use all GPU's\n",
+    "        max_epochs=100            # number of epochs\n",
+    "        )\n",
+    "\n",
+    "    # train\n",
+    "    trainer.fit(model, data)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "869b0393-21cf-4fba-8efd-7678a852b697",
+   "metadata": {
     "tags": []
    },
    "outputs": [],
diff --git a/Train/wandb/debug-cli.GCM.log b/Train/wandb/debug-cli.GCM.log
index db5ddbf..5aca688 100644
--- a/Train/wandb/debug-cli.GCM.log
+++ b/Train/wandb/debug-cli.GCM.log
@@ -1,111 +1,118 @@
-2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:53 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:53 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:29:53 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:17 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:17 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:05 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:05 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:05 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
-2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:52 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:53 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:53 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:29:53 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:16 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:17 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:17 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:30:41 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:05 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:05 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:05 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 15:31:30 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:10:46 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:09 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:11:35 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:01 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:27 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-02-28 23:12:55 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-03-02 21:28:06 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-03-02 21:28:11 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-03-02 21:28:50 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-03-02 21:28:56 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-03-02 21:33:34 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-03-02 21:35:11 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
+2023-03-02 21:35:17 WARNING Connection pool is full, discarding connection: storage.googleapis.com. Connection pool size: 10
