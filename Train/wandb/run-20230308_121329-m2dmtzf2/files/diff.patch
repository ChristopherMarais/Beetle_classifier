diff --git a/Train/.ipynb_checkpoints/PyLi_wanb_sweep_CoatNet-checkpoint.ipynb b/Train/.ipynb_checkpoints/PyLi_wanb_sweep_CoatNet-checkpoint.ipynb
index b3f7aa6..7a1c131 100644
--- a/Train/.ipynb_checkpoints/PyLi_wanb_sweep_CoatNet-checkpoint.ipynb
+++ b/Train/.ipynb_checkpoints/PyLi_wanb_sweep_CoatNet-checkpoint.ipynb
@@ -6,11 +6,11 @@
    "id": "c7b471f1-f5fa-4eb1-b9ae-2d67ed8838df",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:21.824252Z",
-     "iopub.status.busy": "2023-03-08T17:10:21.824252Z",
-     "iopub.status.idle": "2023-03-08T17:10:26.893295Z",
-     "shell.execute_reply": "2023-03-08T17:10:26.892300Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:21.824252Z"
+     "iopub.execute_input": "2023-03-08T17:12:37.621026Z",
+     "iopub.status.busy": "2023-03-08T17:12:37.620036Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.219257Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.218272Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:37.621026Z"
     },
     "tags": []
    },
@@ -74,11 +74,11 @@
    "id": "01c28e3c-850d-48b6-8db9-3a8804e0c9ae",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:26.896303Z",
-     "iopub.status.busy": "2023-03-08T17:10:26.895302Z",
-     "iopub.status.idle": "2023-03-08T17:10:26.924332Z",
-     "shell.execute_reply": "2023-03-08T17:10:26.923339Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:26.895302Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.221258Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.220248Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.235250Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.234249Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.221258Z"
     },
     "tags": []
    },
@@ -141,11 +141,11 @@
    "id": "8b9e722b-cda4-4956-a0c1-8eb31023f765",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:26.926331Z",
-     "iopub.status.busy": "2023-03-08T17:10:26.926331Z",
-     "iopub.status.idle": "2023-03-08T17:10:26.939867Z",
-     "shell.execute_reply": "2023-03-08T17:10:26.938864Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:26.926331Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.237251Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.237251Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.251246Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.250254Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.237251Z"
     },
     "tags": []
    },
@@ -189,11 +189,11 @@
    "id": "9dbe4b19-9805-40b4-a513-ea35715a0c64",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:26.940865Z",
-     "iopub.status.busy": "2023-03-08T17:10:26.940865Z",
-     "iopub.status.idle": "2023-03-08T17:10:26.953853Z",
-     "shell.execute_reply": "2023-03-08T17:10:26.953853Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:26.940865Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.253247Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.252243Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.267248Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.266236Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.253247Z"
     },
     "tags": []
    },
@@ -225,11 +225,11 @@
    "id": "7539d3a5-ca4f-4ba3-a462-05875d4b9a90",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:26.956852Z",
-     "iopub.status.busy": "2023-03-08T17:10:26.955851Z",
-     "iopub.status.idle": "2023-03-08T17:10:26.970854Z",
-     "shell.execute_reply": "2023-03-08T17:10:26.969851Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:26.956852Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.268261Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.268261Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.283264Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.282247Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.268261Z"
     },
     "tags": []
    },
@@ -277,127 +277,130 @@
    "id": "deb34aed-792a-4022-a878-f8d6c4ffa97c",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:26.972851Z",
-     "iopub.status.busy": "2023-03-08T17:10:26.971852Z",
-     "iopub.status.idle": "2023-03-08T17:10:27.000852Z",
-     "shell.execute_reply": "2023-03-08T17:10:26.999851Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:26.972851Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.286259Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.285268Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.314829Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.313811Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.286259Z"
+    },
+    "jupyter": {
+     "source_hidden": true
     },
     "tags": []
    },
    "outputs": [],
    "source": [
-    "class MyModel(LightningModule):\n",
+    "# class MyModel(LightningModule):\n",
     "\n",
-    "    def __init__(self, classes_lst, n_classes=10, acc_task=\"multiclass\", lr=1e-3):\n",
-    "        super().__init__()\n",
+    "#     def __init__(self, classes_lst, n_classes=10, acc_task=\"multiclass\", lr=1e-3):\n",
+    "#         super().__init__()\n",
     "        \n",
     "        \n",
-    "        \"\"\"\n",
-    "        The convolutions are arranged in such a way that the image maintain the x and y dimensions. only the channels change\n",
-    "        \"\"\"\n",
-    "        self.layer_1 = nn.Conv2d(in_channels = 1,out_channels = 3,kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
-    "        self.layer_2 = nn.Conv2d(in_channels = 3,out_channels = 6,kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
-    "        self.layer_3 = nn.Conv2d(in_channels = 6,out_channels = 12,kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
-    "        self.pool = nn.MaxPool2d(kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
-    "        self.layer_5 = nn.Linear(12*50*50,1000)#the input dimensions are (Number of dimensions * height * width)\n",
-    "        self.layer_6 = nn.Linear(1000,100)\n",
-    "        self.layer_7 = nn.Linear(100,50)\n",
-    "        self.layer_8 = nn.Linear(50,10)\n",
-    "        self.layer_9 = nn.Linear(10,10)\n",
+    "#         \"\"\"\n",
+    "#         The convolutions are arranged in such a way that the image maintain the x and y dimensions. only the channels change\n",
+    "#         \"\"\"\n",
+    "#         self.layer_1 = nn.Conv2d(in_channels = 1,out_channels = 3,kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
+    "#         self.layer_2 = nn.Conv2d(in_channels = 3,out_channels = 6,kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
+    "#         self.layer_3 = nn.Conv2d(in_channels = 6,out_channels = 12,kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
+    "#         self.pool = nn.MaxPool2d(kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
+    "#         self.layer_5 = nn.Linear(12*50*50,1000)#the input dimensions are (Number of dimensions * height * width)\n",
+    "#         self.layer_6 = nn.Linear(1000,100)\n",
+    "#         self.layer_7 = nn.Linear(100,50)\n",
+    "#         self.layer_8 = nn.Linear(50,10)\n",
+    "#         self.layer_9 = nn.Linear(10,10)\n",
     "        \n",
     "        \n",
     "        \n",
-    "        # metrics\n",
-    "        self.acc_task = acc_task\n",
-    "        self.lr = lr\n",
-    "        self.n_classes = n_classes\n",
-    "        self.accuracy = torchmetrics.Accuracy(task=self.acc_task, num_classes=self.n_classes)\n",
-    "        self.class_names = classes_lst\n",
-    "        self.loss = CrossEntropyLoss()\n",
+    "#         # metrics\n",
+    "#         self.acc_task = acc_task\n",
+    "#         self.lr = lr\n",
+    "#         self.n_classes = n_classes\n",
+    "#         self.accuracy = torchmetrics.Accuracy(task=self.acc_task, num_classes=self.n_classes)\n",
+    "#         self.class_names = classes_lst\n",
+    "#         self.loss = CrossEntropyLoss()\n",
     "\n",
-    "        # optional - save hyper-parameters to self.hparams\n",
-    "        # they will also be automatically logged as config parameters in W&B\n",
-    "        self.save_hyperparameters()\n",
+    "#         # optional - save hyper-parameters to self.hparams\n",
+    "#         # they will also be automatically logged as config parameters in W&B\n",
+    "#         self.save_hyperparameters()\n",
     "\n",
-    "    def forward(self,x):\n",
-    "        \"\"\"\n",
-    "        x is the input data\n",
-    "        \"\"\"\n",
-    "        x = self.layer_1(x)\n",
-    "        x = self.pool(x)\n",
-    "        x = self.layer_2(x)\n",
-    "        x = self.pool(x)\n",
-    "        x = self.layer_3(x)\n",
-    "        x = self.pool(x)\n",
-    "        x = x.view(x.size(0),-1)\n",
-    "        print(x.size())\n",
-    "        x = self.layer_5(x)\n",
-    "        x = self.layer_6(x)\n",
-    "        x = self.layer_7(x)\n",
-    "        x = self.layer_8(x)\n",
-    "        x = self.layer_9(x)\n",
-    "        return x\n",
+    "#     def forward(self,x):\n",
+    "#         \"\"\"\n",
+    "#         x is the input data\n",
+    "#         \"\"\"\n",
+    "#         x = self.layer_1(x)\n",
+    "#         x = self.pool(x)\n",
+    "#         x = self.layer_2(x)\n",
+    "#         x = self.pool(x)\n",
+    "#         x = self.layer_3(x)\n",
+    "#         x = self.pool(x)\n",
+    "#         x = x.view(x.size(0),-1)\n",
+    "#         print(x.size())\n",
+    "#         x = self.layer_5(x)\n",
+    "#         x = self.layer_6(x)\n",
+    "#         x = self.layer_7(x)\n",
+    "#         x = self.layer_8(x)\n",
+    "#         x = self.layer_9(x)\n",
+    "#         return x\n",
     "\n",
-    "    def configure_optimizers(self):\n",
-    "        optimizer = torch.optim.Adam(self.parameters(),lr = self.lr)\n",
-    "        return optimizer\n",
+    "#     def configure_optimizers(self):\n",
+    "#         optimizer = torch.optim.Adam(self.parameters(),lr = self.lr)\n",
+    "#         return optimizer\n",
     "\n",
-    "# The Pytorch-Lightning module handles all the iterations of the epoch\n",
+    "# # The Pytorch-Lightning module handles all the iterations of the epoch\n",
     "\n",
-    "    def training_step(self,batch,batch_idx):\n",
-    "        x,y = batch\n",
-    "        y_pred = self(x)\n",
-    "        loss = F.cross_entropy(y_pred,y)\n",
-    "        # Log training loss\n",
-    "        self.log('train_loss', loss)\n",
-    "        # Log metrics\n",
-    "        self.log('train_acc', self.accuracy(y_pred, y))\n",
-    "        return loss\n",
+    "#     def training_step(self,batch,batch_idx):\n",
+    "#         x,y = batch\n",
+    "#         y_pred = self(x)\n",
+    "#         loss = F.cross_entropy(y_pred,y)\n",
+    "#         # Log training loss\n",
+    "#         self.log('train_loss', loss)\n",
+    "#         # Log metrics\n",
+    "#         self.log('train_acc', self.accuracy(y_pred, y))\n",
+    "#         return loss\n",
     "\n",
-    "    def validation_step(self,batch,batch_idx):\n",
-    "        preds, loss, acc = self._get_preds_loss_accuracy(batch)\n",
-    "        # Log loss and metric\n",
-    "        self.log('val_loss_alt', loss)\n",
-    "        self.log('val_accuracy_alt', acc)\n",
+    "#     def validation_step(self,batch,batch_idx):\n",
+    "#         preds, loss, acc = self._get_preds_loss_accuracy(batch)\n",
+    "#         # Log loss and metric\n",
+    "#         self.log('val_loss_alt', loss)\n",
+    "#         self.log('val_accuracy_alt', acc)\n",
     "        \n",
-    "        x,y = batch\n",
-    "        y_pred = self(x)\n",
-    "        loss = F.cross_entropy(y_pred,y)\n",
-    "        # Log training loss\n",
-    "        self.log('val_loss', loss)\n",
-    "        # Log metrics\n",
-    "        self.log('val_acc', self.accuracy(y_pred, y))\n",
-    "        self.cpu_pred = y_pred.to(\"cpu\").detach().numpy()\n",
-    "        self.cpu_y = y.to(\"cpu\").detach().numpy()\n",
-    "        wandb.log({\"val_conf_mat\" : wandb.plot.confusion_matrix(probs=self.cpu_pred,\n",
-    "                        y_true=self.cpu_y, preds=None,\n",
-    "                        class_names=self.class_names)})\n",
-    "        return preds\n",
+    "#         x,y = batch\n",
+    "#         y_pred = self(x)\n",
+    "#         loss = F.cross_entropy(y_pred,y)\n",
+    "#         # Log training loss\n",
+    "#         self.log('val_loss', loss)\n",
+    "#         # Log metrics\n",
+    "#         self.log('val_acc', self.accuracy(y_pred, y))\n",
+    "#         self.cpu_pred = y_pred.to(\"cpu\").detach().numpy()\n",
+    "#         self.cpu_y = y.to(\"cpu\").detach().numpy()\n",
+    "#         wandb.log({\"val_conf_mat\" : wandb.plot.confusion_matrix(probs=self.cpu_pred,\n",
+    "#                         y_true=self.cpu_y, preds=None,\n",
+    "#                         class_names=self.class_names)})\n",
+    "#         return preds\n",
     "\n",
-    "    def test_step(self,batch,batch_idx):\n",
-    "        x,y = batch\n",
-    "        y_pred = self(x)\n",
-    "        loss = F.cross_entropy(y_pred,y)\n",
-    "        # Log training loss\n",
-    "        self.log('test_loss', loss)\n",
-    "        # Log metrics\n",
-    "        self.log('test_acc', self.accuracy(y_pred, y))\n",
-    "        self.cpu_pred = y_pred.to(\"cpu\").detach().numpy()\n",
-    "        self.cpu_y = y.to(\"cpu\").detach().numpy()\n",
-    "        wandb.log({\"test_conf_mat\" : wandb.plot.confusion_matrix(probs=self.cpu_pred,\n",
-    "                        y_true=self.cpu_y, preds=None,\n",
-    "                        class_names=self.class_names)})\n",
-    "        return loss\n",
+    "#     def test_step(self,batch,batch_idx):\n",
+    "#         x,y = batch\n",
+    "#         y_pred = self(x)\n",
+    "#         loss = F.cross_entropy(y_pred,y)\n",
+    "#         # Log training loss\n",
+    "#         self.log('test_loss', loss)\n",
+    "#         # Log metrics\n",
+    "#         self.log('test_acc', self.accuracy(y_pred, y))\n",
+    "#         self.cpu_pred = y_pred.to(\"cpu\").detach().numpy()\n",
+    "#         self.cpu_y = y.to(\"cpu\").detach().numpy()\n",
+    "#         wandb.log({\"test_conf_mat\" : wandb.plot.confusion_matrix(probs=self.cpu_pred,\n",
+    "#                         y_true=self.cpu_y, preds=None,\n",
+    "#                         class_names=self.class_names)})\n",
+    "#         return loss\n",
     "    \n",
-    "    def _get_preds_loss_accuracy(self, batch):\n",
-    "        '''convenience function since train/valid/test steps are similar'''\n",
-    "        x, y = batch\n",
-    "        logits = self(x)\n",
-    "        preds = torch.argmax(logits, dim=1)\n",
-    "        loss = self.loss(logits, y)\n",
-    "        acc = accuracy(preds, y, self.acc_task, num_classes=10)\n",
-    "        return preds, loss, acc"
+    "#     def _get_preds_loss_accuracy(self, batch):\n",
+    "#         '''convenience function since train/valid/test steps are similar'''\n",
+    "#         x, y = batch\n",
+    "#         logits = self(x)\n",
+    "#         preds = torch.argmax(logits, dim=1)\n",
+    "#         loss = self.loss(logits, y)\n",
+    "#         acc = accuracy(preds, y, self.acc_task, num_classes=10)\n",
+    "#         return preds, loss, acc"
    ]
   },
   {
@@ -406,11 +409,11 @@
    "id": "1816bdd2-4846-4dee-a595-190697564b38",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:27.002857Z",
-     "iopub.status.busy": "2023-03-08T17:10:27.001851Z",
-     "iopub.status.idle": "2023-03-08T17:10:27.032396Z",
-     "shell.execute_reply": "2023-03-08T17:10:27.031390Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:27.002857Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.316823Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.315822Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.346835Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.345825Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.316823Z"
     },
     "tags": []
    },
@@ -425,7 +428,7 @@
     "        self.acc_task = acc_task\n",
     "        self.lr = lr\n",
     "        self.n_classes = n_classes\n",
-    "        self.accuracy = torchmetrics.Accuracy(task=self.acc_task, num_classes=self.n_classes)\n",
+    "        self.accuracy = torchmetrics.Accuracy(task=self.acc_task, n_classes=self.n_classes)\n",
     "        self.class_names = classes_lst\n",
     "        self.loss = CrossEntropyLoss()\n",
     "        \n",
@@ -441,7 +444,7 @@
     "        \n",
     "        n_sizes = self._get_conv_output(input_shape)\n",
     "\n",
-    "        self.classifier = nn.Linear(n_sizes, num_classes)\n",
+    "        self.classifier = nn.Linear(n_sizes, n_classes)\n",
     "        \n",
     "    # returns the size of the output tensor going into the Linear layer from the conv block.\n",
     "    def _get_conv_output(self, shape):\n",
@@ -524,7 +527,7 @@
     "        logits = self(x)\n",
     "        preds = torch.argmax(logits, dim=1)\n",
     "        loss = self.loss(logits, y)\n",
-    "        acc = accuracy(preds, y, self.acc_task, num_classes=10)\n",
+    "        acc = accuracy(preds, y, self.acc_task, n_classes=10)\n",
     "        return preds, loss, acc"
    ]
   },
@@ -534,12 +537,16 @@
    "id": "f87009dd-3c3a-409c-ada8-3f991d17d0c1",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:27.034398Z",
-     "iopub.status.busy": "2023-03-08T17:10:27.033399Z",
-     "iopub.status.idle": "2023-03-08T17:10:27.049387Z",
-     "shell.execute_reply": "2023-03-08T17:10:27.047400Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:27.034398Z"
-    }
+     "iopub.execute_input": "2023-03-08T17:12:42.347827Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.347827Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.362824Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.361825Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.347827Z"
+    },
+    "jupyter": {
+     "source_hidden": true
+    },
+    "tags": []
    },
    "outputs": [],
    "source": [
@@ -654,11 +661,11 @@
    "id": "188ce4ef-e6b7-4320-8e5d-ceeb616bf7d1",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:27.051399Z",
-     "iopub.status.busy": "2023-03-08T17:10:27.050393Z",
-     "iopub.status.idle": "2023-03-08T17:10:27.063388Z",
-     "shell.execute_reply": "2023-03-08T17:10:27.062386Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:27.051399Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.364822Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.363824Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.378833Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.377818Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.364822Z"
     },
     "tags": []
    },
@@ -699,11 +706,11 @@
    "id": "762279ca-26d9-4310-992f-b6f8912da7fe",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:27.065390Z",
-     "iopub.status.busy": "2023-03-08T17:10:27.064390Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.633996Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.631459Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:27.065390Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.380820Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.379810Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.126118Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.124117Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.379810Z"
     },
     "tags": []
    },
@@ -743,7 +750,7 @@
     {
      "data": {
       "text/html": [
-       "Run data is saved locally in <code>.\\wandb\\run-20230308_121030-fq5x8q4o</code>"
+       "Run data is saved locally in <code>.\\wandb\\run-20230308_121245-cx045npl</code>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -755,7 +762,7 @@
     {
      "data": {
       "text/html": [
-       "Syncing run <strong><a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/fq5x8q4o' target=\"_blank\">fallen-shadow-43</a></strong> to <a href='https://wandb.ai/christopher-marais/computer_vision_test_single' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+       "Syncing run <strong><a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/cx045npl' target=\"_blank\">daily-elevator-45</a></strong> to <a href='https://wandb.ai/christopher-marais/computer_vision_test_single' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -779,7 +786,7 @@
     {
      "data": {
       "text/html": [
-       " View run at <a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/fq5x8q4o' target=\"_blank\">https://wandb.ai/christopher-marais/computer_vision_test_single/runs/fq5x8q4o</a>"
+       " View run at <a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/cx045npl' target=\"_blank\">https://wandb.ai/christopher-marais/computer_vision_test_single/runs/cx045npl</a>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -789,15 +796,16 @@
      "output_type": "display_data"
     },
     {
-     "ename": "NameError",
-     "evalue": "name 'models' is not defined",
+     "ename": "AssertionError",
+     "evalue": "",
      "output_type": "error",
      "traceback": [
       "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
+      "\u001b[1;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
       "Cell \u001b[1;32mIn[10], line 10\u001b[0m\n\u001b[0;32m      7\u001b[0m data \u001b[38;5;241m=\u001b[39m DataModule()\n\u001b[0;32m      9\u001b[0m \u001b[38;5;66;03m# setup model - choose different hyperparameters per experiment\u001b[39;00m\n\u001b[1;32m---> 10\u001b[0m model \u001b[38;5;241m=\u001b[39m \u001b[43mMyModel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mclasses_lst\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mclasses_lst\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_classes\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnum_of_classes\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minput_shape\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m224\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m224\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     13\u001b[0m trainer \u001b[38;5;241m=\u001b[39m Trainer(\n\u001b[0;32m     14\u001b[0m     accelerator\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgpu\u001b[39m\u001b[38;5;124m'\u001b[39m, \n\u001b[0;32m     15\u001b[0m     devices\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, \u001b[38;5;66;03m# use all GPU's (-1)\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     18\u001b[0m     max_epochs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m5\u001b[39m            \u001b[38;5;66;03m# number of epochs\u001b[39;00m\n\u001b[0;32m     19\u001b[0m     )\n",
-      "Cell \u001b[1;32mIn[7], line 15\u001b[0m, in \u001b[0;36mMyModel.__init__\u001b[1;34m(self, classes_lst, input_shape, n_classes, acc_task, lr, transfer)\u001b[0m\n\u001b[0;32m     12\u001b[0m  \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mloss \u001b[38;5;241m=\u001b[39m CrossEntropyLoss()\n\u001b[0;32m     14\u001b[0m \u001b[38;5;66;03m# transfer learning if pretrained=True\u001b[39;00m\n\u001b[1;32m---> 15\u001b[0m  \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfeature_extractor \u001b[38;5;241m=\u001b[39m \u001b[43mmodels\u001b[49m\u001b[38;5;241m.\u001b[39mresnet18(pretrained\u001b[38;5;241m=\u001b[39mtransfer)\n\u001b[0;32m     17\u001b[0m  \u001b[38;5;28;01mif\u001b[39;00m transfer:\n\u001b[0;32m     18\u001b[0m      \u001b[38;5;66;03m# layers are frozen by using eval()\u001b[39;00m\n\u001b[0;32m     19\u001b[0m      \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfeature_extractor\u001b[38;5;241m.\u001b[39meval()\n",
-      "\u001b[1;31mNameError\u001b[0m: name 'models' is not defined"
+      "Cell \u001b[1;32mIn[7], line 10\u001b[0m, in \u001b[0;36mMyModel.__init__\u001b[1;34m(self, classes_lst, input_shape, n_classes, acc_task, lr, transfer)\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlr \u001b[38;5;241m=\u001b[39m lr\n\u001b[0;32m      9\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_classes \u001b[38;5;241m=\u001b[39m n_classes\n\u001b[1;32m---> 10\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maccuracy \u001b[38;5;241m=\u001b[39m \u001b[43mtorchmetrics\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mAccuracy\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtask\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43macc_task\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_classes\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mn_classes\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     11\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mclass_names \u001b[38;5;241m=\u001b[39m classes_lst\n\u001b[0;32m     12\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mloss \u001b[38;5;241m=\u001b[39m CrossEntropyLoss()\n",
+      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\torchmetrics\\classification\\accuracy.py:357\u001b[0m, in \u001b[0;36mAccuracy.__new__\u001b[1;34m(cls, task, threshold, num_classes, num_labels, average, multidim_average, top_k, ignore_index, validate_args, **kwargs)\u001b[0m\n\u001b[0;32m    355\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m BinaryAccuracy(threshold, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    356\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m task \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmulticlass\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m--> 357\u001b[0m     \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(num_classes, \u001b[38;5;28mint\u001b[39m)\n\u001b[0;32m    358\u001b[0m     \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(top_k, \u001b[38;5;28mint\u001b[39m)\n\u001b[0;32m    359\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m MulticlassAccuracy(num_classes, top_k, average, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
+      "\u001b[1;31mAssertionError\u001b[0m: "
      ]
     }
    ],
@@ -829,10 +837,10 @@
    "id": "05c5995d-f9be-4377-bfc0-ea1298711b12",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.635025Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.636024Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.635025Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.635025Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.127114Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.128120Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.128120Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.128120Z"
     }
    },
    "outputs": [],
@@ -846,10 +854,10 @@
    "id": "28625e66-e2a3-4a91-acce-e2948485412b",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.637021Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.638026Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.637021Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.637021Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.130097Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.130097Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.130097Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.130097Z"
     }
    },
    "outputs": [],
@@ -863,10 +871,10 @@
    "id": "378d95e1-4e29-4c7f-bd8c-eaa16677a063",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.639013Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.639013Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.639013Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.639013Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.132103Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.133111Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.132103Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.132103Z"
     },
     "tags": []
    },
@@ -881,10 +889,10 @@
    "id": "91967e96-f127-4758-b427-c996a9fcb4dc",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.641013Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.642013Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.642013Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.642013Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.134107Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.134107Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.134107Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.134107Z"
     }
    },
    "outputs": [],
@@ -906,10 +914,10 @@
    "id": "3b58022d-6961-41b0-a4e1-60bbc1c09791",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.643011Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.644008Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.644008Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.644008Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.136114Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.137108Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.137108Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.137108Z"
     },
     "tags": []
    },
@@ -932,10 +940,10 @@
    "id": "ebde1018-ddfa-43f2-b9c6-f2c1d4b19736",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.645011Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.646017Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.646017Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.646017Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.138105Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.139098Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.139098Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.139098Z"
     },
     "tags": []
    },
@@ -978,10 +986,10 @@
    "id": "91aeb8a0-9ffd-4439-808c-2951d1f74b36",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.648016Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.649014Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.649014Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.649014Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.142101Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.143095Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.143095Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.142101Z"
     },
     "tags": []
    },
@@ -1021,10 +1029,10 @@
    "id": "869b0393-21cf-4fba-8efd-7678a852b697",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.650013Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.651012Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.651012Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.651012Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.144096Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.145125Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.145125Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.145125Z"
     },
     "tags": []
    },
diff --git a/Train/PyLi_wanb_sweep_CoatNet.ipynb b/Train/PyLi_wanb_sweep_CoatNet.ipynb
index b3f7aa6..7a1c131 100644
--- a/Train/PyLi_wanb_sweep_CoatNet.ipynb
+++ b/Train/PyLi_wanb_sweep_CoatNet.ipynb
@@ -6,11 +6,11 @@
    "id": "c7b471f1-f5fa-4eb1-b9ae-2d67ed8838df",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:21.824252Z",
-     "iopub.status.busy": "2023-03-08T17:10:21.824252Z",
-     "iopub.status.idle": "2023-03-08T17:10:26.893295Z",
-     "shell.execute_reply": "2023-03-08T17:10:26.892300Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:21.824252Z"
+     "iopub.execute_input": "2023-03-08T17:12:37.621026Z",
+     "iopub.status.busy": "2023-03-08T17:12:37.620036Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.219257Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.218272Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:37.621026Z"
     },
     "tags": []
    },
@@ -74,11 +74,11 @@
    "id": "01c28e3c-850d-48b6-8db9-3a8804e0c9ae",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:26.896303Z",
-     "iopub.status.busy": "2023-03-08T17:10:26.895302Z",
-     "iopub.status.idle": "2023-03-08T17:10:26.924332Z",
-     "shell.execute_reply": "2023-03-08T17:10:26.923339Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:26.895302Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.221258Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.220248Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.235250Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.234249Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.221258Z"
     },
     "tags": []
    },
@@ -141,11 +141,11 @@
    "id": "8b9e722b-cda4-4956-a0c1-8eb31023f765",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:26.926331Z",
-     "iopub.status.busy": "2023-03-08T17:10:26.926331Z",
-     "iopub.status.idle": "2023-03-08T17:10:26.939867Z",
-     "shell.execute_reply": "2023-03-08T17:10:26.938864Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:26.926331Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.237251Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.237251Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.251246Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.250254Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.237251Z"
     },
     "tags": []
    },
@@ -189,11 +189,11 @@
    "id": "9dbe4b19-9805-40b4-a513-ea35715a0c64",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:26.940865Z",
-     "iopub.status.busy": "2023-03-08T17:10:26.940865Z",
-     "iopub.status.idle": "2023-03-08T17:10:26.953853Z",
-     "shell.execute_reply": "2023-03-08T17:10:26.953853Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:26.940865Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.253247Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.252243Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.267248Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.266236Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.253247Z"
     },
     "tags": []
    },
@@ -225,11 +225,11 @@
    "id": "7539d3a5-ca4f-4ba3-a462-05875d4b9a90",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:26.956852Z",
-     "iopub.status.busy": "2023-03-08T17:10:26.955851Z",
-     "iopub.status.idle": "2023-03-08T17:10:26.970854Z",
-     "shell.execute_reply": "2023-03-08T17:10:26.969851Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:26.956852Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.268261Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.268261Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.283264Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.282247Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.268261Z"
     },
     "tags": []
    },
@@ -277,127 +277,130 @@
    "id": "deb34aed-792a-4022-a878-f8d6c4ffa97c",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:26.972851Z",
-     "iopub.status.busy": "2023-03-08T17:10:26.971852Z",
-     "iopub.status.idle": "2023-03-08T17:10:27.000852Z",
-     "shell.execute_reply": "2023-03-08T17:10:26.999851Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:26.972851Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.286259Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.285268Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.314829Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.313811Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.286259Z"
+    },
+    "jupyter": {
+     "source_hidden": true
     },
     "tags": []
    },
    "outputs": [],
    "source": [
-    "class MyModel(LightningModule):\n",
+    "# class MyModel(LightningModule):\n",
     "\n",
-    "    def __init__(self, classes_lst, n_classes=10, acc_task=\"multiclass\", lr=1e-3):\n",
-    "        super().__init__()\n",
+    "#     def __init__(self, classes_lst, n_classes=10, acc_task=\"multiclass\", lr=1e-3):\n",
+    "#         super().__init__()\n",
     "        \n",
     "        \n",
-    "        \"\"\"\n",
-    "        The convolutions are arranged in such a way that the image maintain the x and y dimensions. only the channels change\n",
-    "        \"\"\"\n",
-    "        self.layer_1 = nn.Conv2d(in_channels = 1,out_channels = 3,kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
-    "        self.layer_2 = nn.Conv2d(in_channels = 3,out_channels = 6,kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
-    "        self.layer_3 = nn.Conv2d(in_channels = 6,out_channels = 12,kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
-    "        self.pool = nn.MaxPool2d(kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
-    "        self.layer_5 = nn.Linear(12*50*50,1000)#the input dimensions are (Number of dimensions * height * width)\n",
-    "        self.layer_6 = nn.Linear(1000,100)\n",
-    "        self.layer_7 = nn.Linear(100,50)\n",
-    "        self.layer_8 = nn.Linear(50,10)\n",
-    "        self.layer_9 = nn.Linear(10,10)\n",
+    "#         \"\"\"\n",
+    "#         The convolutions are arranged in such a way that the image maintain the x and y dimensions. only the channels change\n",
+    "#         \"\"\"\n",
+    "#         self.layer_1 = nn.Conv2d(in_channels = 1,out_channels = 3,kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
+    "#         self.layer_2 = nn.Conv2d(in_channels = 3,out_channels = 6,kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
+    "#         self.layer_3 = nn.Conv2d(in_channels = 6,out_channels = 12,kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
+    "#         self.pool = nn.MaxPool2d(kernel_size = (3,3),padding = (1,1),stride = (1,1))\n",
+    "#         self.layer_5 = nn.Linear(12*50*50,1000)#the input dimensions are (Number of dimensions * height * width)\n",
+    "#         self.layer_6 = nn.Linear(1000,100)\n",
+    "#         self.layer_7 = nn.Linear(100,50)\n",
+    "#         self.layer_8 = nn.Linear(50,10)\n",
+    "#         self.layer_9 = nn.Linear(10,10)\n",
     "        \n",
     "        \n",
     "        \n",
-    "        # metrics\n",
-    "        self.acc_task = acc_task\n",
-    "        self.lr = lr\n",
-    "        self.n_classes = n_classes\n",
-    "        self.accuracy = torchmetrics.Accuracy(task=self.acc_task, num_classes=self.n_classes)\n",
-    "        self.class_names = classes_lst\n",
-    "        self.loss = CrossEntropyLoss()\n",
+    "#         # metrics\n",
+    "#         self.acc_task = acc_task\n",
+    "#         self.lr = lr\n",
+    "#         self.n_classes = n_classes\n",
+    "#         self.accuracy = torchmetrics.Accuracy(task=self.acc_task, num_classes=self.n_classes)\n",
+    "#         self.class_names = classes_lst\n",
+    "#         self.loss = CrossEntropyLoss()\n",
     "\n",
-    "        # optional - save hyper-parameters to self.hparams\n",
-    "        # they will also be automatically logged as config parameters in W&B\n",
-    "        self.save_hyperparameters()\n",
+    "#         # optional - save hyper-parameters to self.hparams\n",
+    "#         # they will also be automatically logged as config parameters in W&B\n",
+    "#         self.save_hyperparameters()\n",
     "\n",
-    "    def forward(self,x):\n",
-    "        \"\"\"\n",
-    "        x is the input data\n",
-    "        \"\"\"\n",
-    "        x = self.layer_1(x)\n",
-    "        x = self.pool(x)\n",
-    "        x = self.layer_2(x)\n",
-    "        x = self.pool(x)\n",
-    "        x = self.layer_3(x)\n",
-    "        x = self.pool(x)\n",
-    "        x = x.view(x.size(0),-1)\n",
-    "        print(x.size())\n",
-    "        x = self.layer_5(x)\n",
-    "        x = self.layer_6(x)\n",
-    "        x = self.layer_7(x)\n",
-    "        x = self.layer_8(x)\n",
-    "        x = self.layer_9(x)\n",
-    "        return x\n",
+    "#     def forward(self,x):\n",
+    "#         \"\"\"\n",
+    "#         x is the input data\n",
+    "#         \"\"\"\n",
+    "#         x = self.layer_1(x)\n",
+    "#         x = self.pool(x)\n",
+    "#         x = self.layer_2(x)\n",
+    "#         x = self.pool(x)\n",
+    "#         x = self.layer_3(x)\n",
+    "#         x = self.pool(x)\n",
+    "#         x = x.view(x.size(0),-1)\n",
+    "#         print(x.size())\n",
+    "#         x = self.layer_5(x)\n",
+    "#         x = self.layer_6(x)\n",
+    "#         x = self.layer_7(x)\n",
+    "#         x = self.layer_8(x)\n",
+    "#         x = self.layer_9(x)\n",
+    "#         return x\n",
     "\n",
-    "    def configure_optimizers(self):\n",
-    "        optimizer = torch.optim.Adam(self.parameters(),lr = self.lr)\n",
-    "        return optimizer\n",
+    "#     def configure_optimizers(self):\n",
+    "#         optimizer = torch.optim.Adam(self.parameters(),lr = self.lr)\n",
+    "#         return optimizer\n",
     "\n",
-    "# The Pytorch-Lightning module handles all the iterations of the epoch\n",
+    "# # The Pytorch-Lightning module handles all the iterations of the epoch\n",
     "\n",
-    "    def training_step(self,batch,batch_idx):\n",
-    "        x,y = batch\n",
-    "        y_pred = self(x)\n",
-    "        loss = F.cross_entropy(y_pred,y)\n",
-    "        # Log training loss\n",
-    "        self.log('train_loss', loss)\n",
-    "        # Log metrics\n",
-    "        self.log('train_acc', self.accuracy(y_pred, y))\n",
-    "        return loss\n",
+    "#     def training_step(self,batch,batch_idx):\n",
+    "#         x,y = batch\n",
+    "#         y_pred = self(x)\n",
+    "#         loss = F.cross_entropy(y_pred,y)\n",
+    "#         # Log training loss\n",
+    "#         self.log('train_loss', loss)\n",
+    "#         # Log metrics\n",
+    "#         self.log('train_acc', self.accuracy(y_pred, y))\n",
+    "#         return loss\n",
     "\n",
-    "    def validation_step(self,batch,batch_idx):\n",
-    "        preds, loss, acc = self._get_preds_loss_accuracy(batch)\n",
-    "        # Log loss and metric\n",
-    "        self.log('val_loss_alt', loss)\n",
-    "        self.log('val_accuracy_alt', acc)\n",
+    "#     def validation_step(self,batch,batch_idx):\n",
+    "#         preds, loss, acc = self._get_preds_loss_accuracy(batch)\n",
+    "#         # Log loss and metric\n",
+    "#         self.log('val_loss_alt', loss)\n",
+    "#         self.log('val_accuracy_alt', acc)\n",
     "        \n",
-    "        x,y = batch\n",
-    "        y_pred = self(x)\n",
-    "        loss = F.cross_entropy(y_pred,y)\n",
-    "        # Log training loss\n",
-    "        self.log('val_loss', loss)\n",
-    "        # Log metrics\n",
-    "        self.log('val_acc', self.accuracy(y_pred, y))\n",
-    "        self.cpu_pred = y_pred.to(\"cpu\").detach().numpy()\n",
-    "        self.cpu_y = y.to(\"cpu\").detach().numpy()\n",
-    "        wandb.log({\"val_conf_mat\" : wandb.plot.confusion_matrix(probs=self.cpu_pred,\n",
-    "                        y_true=self.cpu_y, preds=None,\n",
-    "                        class_names=self.class_names)})\n",
-    "        return preds\n",
+    "#         x,y = batch\n",
+    "#         y_pred = self(x)\n",
+    "#         loss = F.cross_entropy(y_pred,y)\n",
+    "#         # Log training loss\n",
+    "#         self.log('val_loss', loss)\n",
+    "#         # Log metrics\n",
+    "#         self.log('val_acc', self.accuracy(y_pred, y))\n",
+    "#         self.cpu_pred = y_pred.to(\"cpu\").detach().numpy()\n",
+    "#         self.cpu_y = y.to(\"cpu\").detach().numpy()\n",
+    "#         wandb.log({\"val_conf_mat\" : wandb.plot.confusion_matrix(probs=self.cpu_pred,\n",
+    "#                         y_true=self.cpu_y, preds=None,\n",
+    "#                         class_names=self.class_names)})\n",
+    "#         return preds\n",
     "\n",
-    "    def test_step(self,batch,batch_idx):\n",
-    "        x,y = batch\n",
-    "        y_pred = self(x)\n",
-    "        loss = F.cross_entropy(y_pred,y)\n",
-    "        # Log training loss\n",
-    "        self.log('test_loss', loss)\n",
-    "        # Log metrics\n",
-    "        self.log('test_acc', self.accuracy(y_pred, y))\n",
-    "        self.cpu_pred = y_pred.to(\"cpu\").detach().numpy()\n",
-    "        self.cpu_y = y.to(\"cpu\").detach().numpy()\n",
-    "        wandb.log({\"test_conf_mat\" : wandb.plot.confusion_matrix(probs=self.cpu_pred,\n",
-    "                        y_true=self.cpu_y, preds=None,\n",
-    "                        class_names=self.class_names)})\n",
-    "        return loss\n",
+    "#     def test_step(self,batch,batch_idx):\n",
+    "#         x,y = batch\n",
+    "#         y_pred = self(x)\n",
+    "#         loss = F.cross_entropy(y_pred,y)\n",
+    "#         # Log training loss\n",
+    "#         self.log('test_loss', loss)\n",
+    "#         # Log metrics\n",
+    "#         self.log('test_acc', self.accuracy(y_pred, y))\n",
+    "#         self.cpu_pred = y_pred.to(\"cpu\").detach().numpy()\n",
+    "#         self.cpu_y = y.to(\"cpu\").detach().numpy()\n",
+    "#         wandb.log({\"test_conf_mat\" : wandb.plot.confusion_matrix(probs=self.cpu_pred,\n",
+    "#                         y_true=self.cpu_y, preds=None,\n",
+    "#                         class_names=self.class_names)})\n",
+    "#         return loss\n",
     "    \n",
-    "    def _get_preds_loss_accuracy(self, batch):\n",
-    "        '''convenience function since train/valid/test steps are similar'''\n",
-    "        x, y = batch\n",
-    "        logits = self(x)\n",
-    "        preds = torch.argmax(logits, dim=1)\n",
-    "        loss = self.loss(logits, y)\n",
-    "        acc = accuracy(preds, y, self.acc_task, num_classes=10)\n",
-    "        return preds, loss, acc"
+    "#     def _get_preds_loss_accuracy(self, batch):\n",
+    "#         '''convenience function since train/valid/test steps are similar'''\n",
+    "#         x, y = batch\n",
+    "#         logits = self(x)\n",
+    "#         preds = torch.argmax(logits, dim=1)\n",
+    "#         loss = self.loss(logits, y)\n",
+    "#         acc = accuracy(preds, y, self.acc_task, num_classes=10)\n",
+    "#         return preds, loss, acc"
    ]
   },
   {
@@ -406,11 +409,11 @@
    "id": "1816bdd2-4846-4dee-a595-190697564b38",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:27.002857Z",
-     "iopub.status.busy": "2023-03-08T17:10:27.001851Z",
-     "iopub.status.idle": "2023-03-08T17:10:27.032396Z",
-     "shell.execute_reply": "2023-03-08T17:10:27.031390Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:27.002857Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.316823Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.315822Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.346835Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.345825Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.316823Z"
     },
     "tags": []
    },
@@ -425,7 +428,7 @@
     "        self.acc_task = acc_task\n",
     "        self.lr = lr\n",
     "        self.n_classes = n_classes\n",
-    "        self.accuracy = torchmetrics.Accuracy(task=self.acc_task, num_classes=self.n_classes)\n",
+    "        self.accuracy = torchmetrics.Accuracy(task=self.acc_task, n_classes=self.n_classes)\n",
     "        self.class_names = classes_lst\n",
     "        self.loss = CrossEntropyLoss()\n",
     "        \n",
@@ -441,7 +444,7 @@
     "        \n",
     "        n_sizes = self._get_conv_output(input_shape)\n",
     "\n",
-    "        self.classifier = nn.Linear(n_sizes, num_classes)\n",
+    "        self.classifier = nn.Linear(n_sizes, n_classes)\n",
     "        \n",
     "    # returns the size of the output tensor going into the Linear layer from the conv block.\n",
     "    def _get_conv_output(self, shape):\n",
@@ -524,7 +527,7 @@
     "        logits = self(x)\n",
     "        preds = torch.argmax(logits, dim=1)\n",
     "        loss = self.loss(logits, y)\n",
-    "        acc = accuracy(preds, y, self.acc_task, num_classes=10)\n",
+    "        acc = accuracy(preds, y, self.acc_task, n_classes=10)\n",
     "        return preds, loss, acc"
    ]
   },
@@ -534,12 +537,16 @@
    "id": "f87009dd-3c3a-409c-ada8-3f991d17d0c1",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:27.034398Z",
-     "iopub.status.busy": "2023-03-08T17:10:27.033399Z",
-     "iopub.status.idle": "2023-03-08T17:10:27.049387Z",
-     "shell.execute_reply": "2023-03-08T17:10:27.047400Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:27.034398Z"
-    }
+     "iopub.execute_input": "2023-03-08T17:12:42.347827Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.347827Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.362824Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.361825Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.347827Z"
+    },
+    "jupyter": {
+     "source_hidden": true
+    },
+    "tags": []
    },
    "outputs": [],
    "source": [
@@ -654,11 +661,11 @@
    "id": "188ce4ef-e6b7-4320-8e5d-ceeb616bf7d1",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:27.051399Z",
-     "iopub.status.busy": "2023-03-08T17:10:27.050393Z",
-     "iopub.status.idle": "2023-03-08T17:10:27.063388Z",
-     "shell.execute_reply": "2023-03-08T17:10:27.062386Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:27.051399Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.364822Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.363824Z",
+     "iopub.status.idle": "2023-03-08T17:12:42.378833Z",
+     "shell.execute_reply": "2023-03-08T17:12:42.377818Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.364822Z"
     },
     "tags": []
    },
@@ -699,11 +706,11 @@
    "id": "762279ca-26d9-4310-992f-b6f8912da7fe",
    "metadata": {
     "execution": {
-     "iopub.execute_input": "2023-03-08T17:10:27.065390Z",
-     "iopub.status.busy": "2023-03-08T17:10:27.064390Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.633996Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.631459Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:27.065390Z"
+     "iopub.execute_input": "2023-03-08T17:12:42.380820Z",
+     "iopub.status.busy": "2023-03-08T17:12:42.379810Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.126118Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.124117Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:42.379810Z"
     },
     "tags": []
    },
@@ -743,7 +750,7 @@
     {
      "data": {
       "text/html": [
-       "Run data is saved locally in <code>.\\wandb\\run-20230308_121030-fq5x8q4o</code>"
+       "Run data is saved locally in <code>.\\wandb\\run-20230308_121245-cx045npl</code>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -755,7 +762,7 @@
     {
      "data": {
       "text/html": [
-       "Syncing run <strong><a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/fq5x8q4o' target=\"_blank\">fallen-shadow-43</a></strong> to <a href='https://wandb.ai/christopher-marais/computer_vision_test_single' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+       "Syncing run <strong><a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/cx045npl' target=\"_blank\">daily-elevator-45</a></strong> to <a href='https://wandb.ai/christopher-marais/computer_vision_test_single' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -779,7 +786,7 @@
     {
      "data": {
       "text/html": [
-       " View run at <a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/fq5x8q4o' target=\"_blank\">https://wandb.ai/christopher-marais/computer_vision_test_single/runs/fq5x8q4o</a>"
+       " View run at <a href='https://wandb.ai/christopher-marais/computer_vision_test_single/runs/cx045npl' target=\"_blank\">https://wandb.ai/christopher-marais/computer_vision_test_single/runs/cx045npl</a>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -789,15 +796,16 @@
      "output_type": "display_data"
     },
     {
-     "ename": "NameError",
-     "evalue": "name 'models' is not defined",
+     "ename": "AssertionError",
+     "evalue": "",
      "output_type": "error",
      "traceback": [
       "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
+      "\u001b[1;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
       "Cell \u001b[1;32mIn[10], line 10\u001b[0m\n\u001b[0;32m      7\u001b[0m data \u001b[38;5;241m=\u001b[39m DataModule()\n\u001b[0;32m      9\u001b[0m \u001b[38;5;66;03m# setup model - choose different hyperparameters per experiment\u001b[39;00m\n\u001b[1;32m---> 10\u001b[0m model \u001b[38;5;241m=\u001b[39m \u001b[43mMyModel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mclasses_lst\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mclasses_lst\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_classes\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnum_of_classes\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minput_shape\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m224\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m224\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     13\u001b[0m trainer \u001b[38;5;241m=\u001b[39m Trainer(\n\u001b[0;32m     14\u001b[0m     accelerator\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgpu\u001b[39m\u001b[38;5;124m'\u001b[39m, \n\u001b[0;32m     15\u001b[0m     devices\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, \u001b[38;5;66;03m# use all GPU's (-1)\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     18\u001b[0m     max_epochs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m5\u001b[39m            \u001b[38;5;66;03m# number of epochs\u001b[39;00m\n\u001b[0;32m     19\u001b[0m     )\n",
-      "Cell \u001b[1;32mIn[7], line 15\u001b[0m, in \u001b[0;36mMyModel.__init__\u001b[1;34m(self, classes_lst, input_shape, n_classes, acc_task, lr, transfer)\u001b[0m\n\u001b[0;32m     12\u001b[0m  \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mloss \u001b[38;5;241m=\u001b[39m CrossEntropyLoss()\n\u001b[0;32m     14\u001b[0m \u001b[38;5;66;03m# transfer learning if pretrained=True\u001b[39;00m\n\u001b[1;32m---> 15\u001b[0m  \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfeature_extractor \u001b[38;5;241m=\u001b[39m \u001b[43mmodels\u001b[49m\u001b[38;5;241m.\u001b[39mresnet18(pretrained\u001b[38;5;241m=\u001b[39mtransfer)\n\u001b[0;32m     17\u001b[0m  \u001b[38;5;28;01mif\u001b[39;00m transfer:\n\u001b[0;32m     18\u001b[0m      \u001b[38;5;66;03m# layers are frozen by using eval()\u001b[39;00m\n\u001b[0;32m     19\u001b[0m      \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfeature_extractor\u001b[38;5;241m.\u001b[39meval()\n",
-      "\u001b[1;31mNameError\u001b[0m: name 'models' is not defined"
+      "Cell \u001b[1;32mIn[7], line 10\u001b[0m, in \u001b[0;36mMyModel.__init__\u001b[1;34m(self, classes_lst, input_shape, n_classes, acc_task, lr, transfer)\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlr \u001b[38;5;241m=\u001b[39m lr\n\u001b[0;32m      9\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_classes \u001b[38;5;241m=\u001b[39m n_classes\n\u001b[1;32m---> 10\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maccuracy \u001b[38;5;241m=\u001b[39m \u001b[43mtorchmetrics\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mAccuracy\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtask\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43macc_task\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_classes\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mn_classes\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     11\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mclass_names \u001b[38;5;241m=\u001b[39m classes_lst\n\u001b[0;32m     12\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mloss \u001b[38;5;241m=\u001b[39m CrossEntropyLoss()\n",
+      "File \u001b[1;32m~\\.conda\\envs\\BC_310\\lib\\site-packages\\torchmetrics\\classification\\accuracy.py:357\u001b[0m, in \u001b[0;36mAccuracy.__new__\u001b[1;34m(cls, task, threshold, num_classes, num_labels, average, multidim_average, top_k, ignore_index, validate_args, **kwargs)\u001b[0m\n\u001b[0;32m    355\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m BinaryAccuracy(threshold, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    356\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m task \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmulticlass\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m--> 357\u001b[0m     \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(num_classes, \u001b[38;5;28mint\u001b[39m)\n\u001b[0;32m    358\u001b[0m     \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(top_k, \u001b[38;5;28mint\u001b[39m)\n\u001b[0;32m    359\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m MulticlassAccuracy(num_classes, top_k, average, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
+      "\u001b[1;31mAssertionError\u001b[0m: "
      ]
     }
    ],
@@ -829,10 +837,10 @@
    "id": "05c5995d-f9be-4377-bfc0-ea1298711b12",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.635025Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.636024Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.635025Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.635025Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.127114Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.128120Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.128120Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.128120Z"
     }
    },
    "outputs": [],
@@ -846,10 +854,10 @@
    "id": "28625e66-e2a3-4a91-acce-e2948485412b",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.637021Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.638026Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.637021Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.637021Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.130097Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.130097Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.130097Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.130097Z"
     }
    },
    "outputs": [],
@@ -863,10 +871,10 @@
    "id": "378d95e1-4e29-4c7f-bd8c-eaa16677a063",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.639013Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.639013Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.639013Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.639013Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.132103Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.133111Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.132103Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.132103Z"
     },
     "tags": []
    },
@@ -881,10 +889,10 @@
    "id": "91967e96-f127-4758-b427-c996a9fcb4dc",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.641013Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.642013Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.642013Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.642013Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.134107Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.134107Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.134107Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.134107Z"
     }
    },
    "outputs": [],
@@ -906,10 +914,10 @@
    "id": "3b58022d-6961-41b0-a4e1-60bbc1c09791",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.643011Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.644008Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.644008Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.644008Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.136114Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.137108Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.137108Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.137108Z"
     },
     "tags": []
    },
@@ -932,10 +940,10 @@
    "id": "ebde1018-ddfa-43f2-b9c6-f2c1d4b19736",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.645011Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.646017Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.646017Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.646017Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.138105Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.139098Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.139098Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.139098Z"
     },
     "tags": []
    },
@@ -978,10 +986,10 @@
    "id": "91aeb8a0-9ffd-4439-808c-2951d1f74b36",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.648016Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.649014Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.649014Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.649014Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.142101Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.143095Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.143095Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.142101Z"
     },
     "tags": []
    },
@@ -1021,10 +1029,10 @@
    "id": "869b0393-21cf-4fba-8efd-7678a852b697",
    "metadata": {
     "execution": {
-     "iopub.status.busy": "2023-03-08T17:10:32.650013Z",
-     "iopub.status.idle": "2023-03-08T17:10:32.651012Z",
-     "shell.execute_reply": "2023-03-08T17:10:32.651012Z",
-     "shell.execute_reply.started": "2023-03-08T17:10:32.651012Z"
+     "iopub.status.busy": "2023-03-08T17:12:48.144096Z",
+     "iopub.status.idle": "2023-03-08T17:12:48.145125Z",
+     "shell.execute_reply": "2023-03-08T17:12:48.145125Z",
+     "shell.execute_reply.started": "2023-03-08T17:12:48.145125Z"
     },
     "tags": []
    },
